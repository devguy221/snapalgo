{"version":3,"file":"fetchGasEstimatesViaEthFeeHistory.js","sourceRoot":"","sources":["../../src/gas/fetchGasEstimatesViaEthFeeHistory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAAqC;AACrC,4CAAoC;AAGpC,sIAA8G;AAC9G,8JAAsI;AACtI,sHAA8F;AAC9F,sHAA8F;AAC9F,8HAAsG;AACtG,8HAAsG;AACtG,gIAAwG;AACxG,4GAAoF;AAEpF;;;;;;;;;;;;;;GAcG;AACH,SAA8B,iCAAiC,CAC7D,QAAkB;;QAElB,MAAM,WAAW,GAAG,MAAM,0BAAgB,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,IAAI,uCAA6B,CAAC;YAChD,QAAQ;YACR,cAAc,EAAE,WAAW,CAAC,MAAM;SACnC,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;QAE/C,MAAM,sBAAsB,GAAG,mDAAyC,CACtE,eAAe,CAAC,UAAU,CAC3B,CAAC;QACF,MAAM,gBAAgB,GAAG,oBAAO,CAAC,WAAW,CAAC,aAAa,EAAE,gBAAI,CAAC,CAAC;QAClE,MAAM,sBAAsB,GAAG,+BAAqB,CAClD,eAAe,CAAC,WAAW,CAC5B,CAAC;QACF,MAAM,YAAY,GAAG,+BAAqB,CACxC,eAAe,CAAC,mBAAmB,CACpC,CAAC;QACF,MAAM,sBAAsB,GAAG,mCAAyB,CACtD,eAAe,CAAC,MAAM,CACvB,CAAC;QACF,MAAM,0BAA0B,GAAG,mCAAyB,CAC1D,eAAe,CAAC,WAAW,CAC5B,CAAC;QACF,MAAM,gBAAgB,GAAG,mCAAyB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC9E,MAAM,iBAAiB,GAAG,oCAA0B,CAClD,eAAe,CAAC,SAAS,CAC1B,CAAC;QAEF,uCACK,sBAAsB,KACzB,gBAAgB;YAChB,sBAAsB;YACtB,YAAY;YACZ,sBAAsB;YACtB,0BAA0B;YAC1B,gBAAgB;YAChB,iBAAiB,IACjB;IACJ,CAAC;CAAA;AAzCD,oDAyCC","sourcesContent":["import { fromWei } from 'ethjs-unit';\nimport { GWEI } from '../constants';\nimport { GasFeeEstimates } from './GasFeeController';\nimport { EthQuery } from './fetchGasEstimatesViaEthFeeHistory/types';\nimport BlockFeeHistoryDatasetFetcher from './fetchGasEstimatesViaEthFeeHistory/BlockFeeHistoryDatasetFetcher';\nimport calculateGasFeeEstimatesForPriorityLevels from './fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels';\nimport calculateBaseFeeRange from './fetchGasEstimatesViaEthFeeHistory/calculateBaseFeeRange';\nimport calculateBaseFeeTrend from './fetchGasEstimatesViaEthFeeHistory/calculateBaseFeeTrend';\nimport calculatePriorityFeeRange from './fetchGasEstimatesViaEthFeeHistory/calculatePriorityFeeRange';\nimport calculatePriorityFeeTrend from './fetchGasEstimatesViaEthFeeHistory/calculatePriorityFeeTrend';\nimport calculateNetworkCongestion from './fetchGasEstimatesViaEthFeeHistory/calculateNetworkCongestion';\nimport fetchLatestBlock from './fetchGasEstimatesViaEthFeeHistory/fetchLatestBlock';\n\n/**\n * Generates gas fee estimates based on gas fees that have been used in the recent past so that\n * those estimates can be displayed to users.\n *\n * To produce the estimates, the last 5 blocks are read from the network, and for each block, the\n * priority fees for transactions at the 10th, 20th, and 30th percentiles are also read (here\n * \"percentile\" signifies the level at which those transactions contribute to the overall gas used\n * for the block, where higher percentiles correspond to higher fees). This information is used to\n * calculate reasonable max priority and max fees for three different priority levels (higher\n * priority = higher fee).\n *\n * @param ethQuery - An EthQuery instance.\n * @returns Base and priority fee estimates, categorized by priority level, as well as an estimate\n * for the next block's base fee.\n */\nexport default async function fetchGasEstimatesViaEthFeeHistory(\n  ethQuery: EthQuery,\n): Promise<GasFeeEstimates> {\n  const latestBlock = await fetchLatestBlock(ethQuery);\n  const fetcher = new BlockFeeHistoryDatasetFetcher({\n    ethQuery,\n    endBlockNumber: latestBlock.number,\n  });\n  const blocksByDataset = await fetcher.forAll();\n\n  const levelSpecificEstimates = calculateGasFeeEstimatesForPriorityLevels(\n    blocksByDataset.smallRange,\n  );\n  const estimatedBaseFee = fromWei(latestBlock.baseFeePerGas, GWEI);\n  const historicalBaseFeeRange = calculateBaseFeeRange(\n    blocksByDataset.mediumRange,\n  );\n  const baseFeeTrend = calculateBaseFeeTrend(\n    blocksByDataset.latestWithNextBlock,\n  );\n  const latestPriorityFeeRange = calculatePriorityFeeRange(\n    blocksByDataset.latest,\n  );\n  const historicalPriorityFeeRange = calculatePriorityFeeRange(\n    blocksByDataset.mediumRange,\n  );\n  const priorityFeeTrend = calculatePriorityFeeTrend(blocksByDataset.tinyRange);\n  const networkCongestion = calculateNetworkCongestion(\n    blocksByDataset.longRange,\n  );\n\n  return {\n    ...levelSpecificEstimates,\n    estimatedBaseFee,\n    historicalBaseFeeRange,\n    baseFeeTrend,\n    latestPriorityFeeRange,\n    historicalPriorityFeeRange,\n    priorityFeeTrend,\n    networkCongestion,\n  };\n}\n"]}