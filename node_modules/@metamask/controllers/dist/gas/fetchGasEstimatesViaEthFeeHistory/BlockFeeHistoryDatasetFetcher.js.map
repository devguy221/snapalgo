{"version":3,"file":"BlockFeeHistoryDatasetFetcher.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/BlockFeeHistoryDatasetFetcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,mFAIiC;AAGjC,MAAqB,6BAA6B;IAKhD,YAAY,EACV,QAAQ,EACR,cAAc,GAIf;QACC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEK,MAAM;;YACV,MAAM,CACJ,WAAW,EACX,UAAU,EACV,SAAS,EACT,mBAAmB,EACpB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,cAAc,EAAE;gBACrB,IAAI,CAAC,aAAa,EAAE;gBACpB,IAAI,CAAC,YAAY,EAAE;gBACnB,IAAI,CAAC,sBAAsB,EAAE;aAC9B,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAE3C,CAAC;YAEJ,OAAO;gBACL,WAAW;gBACX,UAAU;gBACV,SAAS;gBACT,MAAM;gBACN,mBAAmB;aACpB,CAAC;QACJ,CAAC;KAAA;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,uBAAuB,CAAC;YAClC,cAAc,EAAE,GAAG;YACnB,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,uBAAuB,CAAC;YAClC,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;SAC1B,CAAC,CAAC;IACL,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,uBAAuB,CAAC;YAClC,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC,EAAE,CAAC;SAClB,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;QACpB,OAAO,IAAI,CAAC,uBAAuB,CAAC;YAClC,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IAEO,uBAAuB,CAA4B,IAI1D;QACC,OAAO,8BAAoB,iBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,cAAc,IAC1B,IAAI,EACkC,CAAC;IAC9C,CAAC;IAEO,uBAAuB,CAA4B,IAI1D;QACC,OAAO,8BAAoB,iBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,cAAc,EAC7B,gBAAgB,EAAE,IAAI,IACnB,IAAI,EACP,CAAC;IACL,CAAC;CACF;AA9FD,gDA8FC","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport fetchBlockFeeHistory, {\n  ExistingFeeHistoryBlock,\n  ExtractPercentileFrom,\n  FeeHistoryBlock,\n} from '../fetchBlockFeeHistory';\nimport { EthQuery } from './types';\n\nexport default class BlockFeeHistoryDatasetFetcher {\n  private ethQuery: EthQuery;\n\n  private endBlockNumber: BN;\n\n  constructor({\n    ethQuery,\n    endBlockNumber,\n  }: {\n    ethQuery: EthQuery;\n    endBlockNumber: BN;\n  }) {\n    this.ethQuery = ethQuery;\n    this.endBlockNumber = endBlockNumber;\n  }\n\n  async forAll() {\n    const [\n      mediumRange,\n      smallRange,\n      tinyRange,\n      latestWithNextBlock,\n    ] = await Promise.all([\n      this.forMediumRange(),\n      this.forSmallRange(),\n      this.forTinyRange(),\n      this.forLatestWithNextBlock(),\n    ]);\n\n    const latest = latestWithNextBlock.slice(0, -1) as ExistingFeeHistoryBlock<\n      ExtractPercentileFrom<typeof latestWithNextBlock>\n    >[];\n\n    return {\n      mediumRange,\n      smallRange,\n      tinyRange,\n      latest,\n      latestWithNextBlock,\n    };\n  }\n\n  forMediumRange() {\n    return this.fetchExcludingNextBlock({\n      numberOfBlocks: 200,\n      percentiles: [10, 95],\n    });\n  }\n\n  forSmallRange() {\n    return this.fetchExcludingNextBlock({\n      numberOfBlocks: 5,\n      percentiles: [10, 20, 30],\n    });\n  }\n\n  forTinyRange() {\n    return this.fetchExcludingNextBlock({\n      numberOfBlocks: 2,\n      percentiles: [50],\n    });\n  }\n\n  forLatestWithNextBlock() {\n    return this.fetchIncludingNextBlock({\n      numberOfBlocks: 1,\n      percentiles: [10, 95],\n    });\n  }\n\n  private fetchExcludingNextBlock<T extends number = number>(args: {\n    numberOfBlocks: number;\n    endBlock?: BN;\n    percentiles?: T[];\n  }): Promise<ExistingFeeHistoryBlock<T>[]> {\n    return fetchBlockFeeHistory({\n      ethQuery: this.ethQuery,\n      endBlock: this.endBlockNumber,\n      ...args,\n    }) as Promise<ExistingFeeHistoryBlock<T>[]>;\n  }\n\n  private fetchIncludingNextBlock<T extends number = number>(args: {\n    numberOfBlocks: number;\n    endBlock?: BN;\n    percentiles?: T[];\n  }): Promise<FeeHistoryBlock<T>[]> {\n    return fetchBlockFeeHistory({\n      ethQuery: this.ethQuery,\n      endBlock: this.endBlockNumber,\n      includeNextBlock: true,\n      ...args,\n    });\n  }\n}\n"]}