{"version":3,"file":"calculateBaseFeeTrend.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/calculateBaseFeeTrend.ts"],"names":[],"mappings":";;AAEA;;;;;;GAMG;AACH,SAAwB,qBAAqB,CAC3C,MAAqC;IAErC,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAClE,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,IAAI,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEvD,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QACzB,OAAO,MAAM,CAAC;KACf;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAbD,wCAaC","sourcesContent":["import { FeeHistoryBlock } from '../fetchBlockFeeHistory';\n\n/**\n * Given a collection of blocks, returns an indicator of whether the base fee is moving up, down, or\n * holding steady, based on comparing the last base fee in the collection to the first.\n *\n * @param blocks - A set of blocks obtained via {@link BlockFeeHistoryDatasetFetcher}.\n * @returns The indicator (\"up\", \"down\", or \"level\").\n */\nexport default function calculateBaseFeeTrend<Percentile extends number>(\n  blocks: FeeHistoryBlock<Percentile>[],\n) {\n  const baseFeesPerGas = blocks.map((block) => block.baseFeePerGas);\n  const first = baseFeesPerGas[0];\n  const last = baseFeesPerGas[baseFeesPerGas.length - 1];\n\n  if (last.gt(first)) {\n    return 'up';\n  } else if (first.gt(last)) {\n    return 'down';\n  }\n  return 'level';\n}\n"]}