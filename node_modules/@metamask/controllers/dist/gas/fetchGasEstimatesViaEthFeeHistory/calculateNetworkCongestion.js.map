{"version":3,"file":"calculateNetworkCongestion.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/calculateNetworkCongestion.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;GAUG;AACH,SAAwB,2BAA2B,CACjD,MAAgC;IAEhC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC;QACpE,MAAM,oBAAoB,GAAG,MAAM;aAChC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC;aACnC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,6BAA6B,GAAG,oBAAoB,CAAC,SAAS,CAClE,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAC1D,CAAC;QACF,OAAO,6BAA6B,KAAK,CAAC,CAAC;YACzC,CAAC,CAAC,6BAA6B,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC,CAAC;KACP;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAhBD,8CAgBC","sourcesContent":["import { FeeHistoryBlock } from '../fetchBlockFeeHistory';\n\n/**\n * Calculates the approximate normalized ranking of the latest base fee in the given blocks among\n * the entirety of the blocks. That is, sorts all of the base fees, then finds the rank of the first\n * base fee that meets or exceeds the latest base fee among the base fees. The result is the rank\n * normalized as a number between 0 and 1, where 0 means that the latest base fee is the least of\n * all and 1 means that the latest base fee is the greatest of all. This can ultimately be used to\n * render a visualization of the status of the network for users.\n *\n * @param blocks - A set of blocks obtained via {@link BlockFeeHistoryDatasetFetcher}.\n * @returns A number between 0 and 1.\n */\nexport default function fetchNetworkCongestionLevel(\n  blocks: FeeHistoryBlock<never>[],\n): number {\n  if (blocks.length > 0) {\n    const latestBaseFeePerGas = blocks[blocks.length - 1].baseFeePerGas;\n    const sortedBaseFeesPerGas = blocks\n      .map((block) => block.baseFeePerGas)\n      .sort((a, b) => a.cmp(b));\n    const indexOfBaseFeeNearestToLatest = sortedBaseFeesPerGas.findIndex(\n      (baseFeePerGas) => baseFeePerGas.gte(latestBaseFeePerGas),\n    );\n    return indexOfBaseFeeNearestToLatest !== -1\n      ? indexOfBaseFeeNearestToLatest / (blocks.length - 1)\n      : 0;\n  }\n  return 0.5;\n}\n"]}