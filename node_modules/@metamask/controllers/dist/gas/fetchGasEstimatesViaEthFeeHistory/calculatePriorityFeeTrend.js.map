{"version":3,"file":"calculatePriorityFeeTrend.js","sourceRoot":"","sources":["../../../src/gas/fetchGasEstimatesViaEthFeeHistory/calculatePriorityFeeTrend.ts"],"names":[],"mappings":";;AAAA,qDAAqC;AAGrC;;;;;;GAMG;AACH,SAAwB,yBAAyB,CAC/C,MAAqC;IAErC,MAAM,YAAY,GAAG,MAAM;SACxB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;SAClD,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,oBAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,IAAI,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEnD,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QACzB,OAAO,MAAM,CAAC;KACf;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAfD,4CAeC","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport { ExistingFeeHistoryBlock } from '../fetchBlockFeeHistory';\n\n/**\n * Given a collection of blocks, returns an indicator of whether the base fee is moving up, down, or\n * holding steady, based on comparing the last base fee in the collection to the first.\n *\n * @param blocks - A set of blocks obtained via {@link BlockFeeHistoryDatasetFetcher}.\n * @returns The indicator (\"up\", \"down\", or \"level\").\n */\nexport default function calculatePriorityFeeTrend(\n  blocks: ExistingFeeHistoryBlock<50>[],\n) {\n  const priorityFees = blocks\n    .map((block) => block.priorityFeesByPercentile[50])\n    .filter((priorityFee) => !priorityFee.eq(new BN(0)));\n  const first = priorityFees[0];\n  const last = priorityFees[priorityFees.length - 1];\n\n  if (last.gt(first)) {\n    return 'up';\n  } else if (first.gt(last)) {\n    return 'down';\n  }\n  return 'level';\n}\n"]}