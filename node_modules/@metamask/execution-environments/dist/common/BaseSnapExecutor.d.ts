/// <reference types="node" />
/// <reference types="ses" />
import { Duplex } from 'stream';
import { Endowments, JSONRPCID } from '../__GENERATED__/openrpc';
export declare class BaseSnapExecutor {
    private snapRpcHandlers;
    private commandStream;
    private rpcStream;
    private methods;
    private snapErrorHandler?;
    private snapPromiseErrorHandler?;
    private endowmentTeardown?;
    protected constructor(commandStream: Duplex, rpcStream: Duplex);
    private errorHandler;
    private onCommandRequest;
    protected notify(requestObject: Record<string, unknown>): void;
    protected respond(id: JSONRPCID, responseObj: Record<string, unknown>): void;
    /**
     * Attempts to evaluate a snap in SES.
     * Generates the APIs for the snap. May throw on error.
     *
     * @param {string} snapName - The name of the snap.
     * @param {Array<string>} approvedPermissions - The snap's approved permissions.
     * Should always be a value returned from the permissions controller.
     * @param {string} sourceCode - The source code of the snap, in IIFE format.
     * @param {Array} endowments - An array of the names of the endowments.
     */
    protected startSnap(snapName: string, sourceCode: string, _endowments?: Endowments): void;
    protected onTerminate(): void;
    /**
     * Sets up the given snap's RPC message handler, creates a hardened
     * snap provider object (i.e. globalThis.wallet), and returns it.
     */
    private createSnapProvider;
    /**
     * Removes the snap with the given name. Specifically:
     * - Deletes the snap's RPC handler, if any
     */
    private removeSnap;
}
