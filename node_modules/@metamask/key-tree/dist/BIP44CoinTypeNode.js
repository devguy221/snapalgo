"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBIP44AddressKeyDeriver = exports.deriveBIP44AddressKey = exports.BIP44CoinTypeNode = exports.BIP_44_COIN_TYPE_DEPTH = void 0;
const BIP44Node_1 = require("./BIP44Node");
const utils_1 = require("./utils");
exports.BIP_44_COIN_TYPE_DEPTH = 2;
/**
 * Used to conceal the inner {@link BIP44Node} from consumers.
 */
const InnerNode = Symbol('_node');
/**
 * A wrapper object for BIP-44 `coin_type` keys. `coin_type` is the index
 * specifying the protocol for which deeper keys are intended. For the
 * authoritative list of coin types, please see
 * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).
 *
 * Recall that a BIP-44 HD tree path consists of the following nodes:
 *
 * `m / 44' / coin_type' / account' / change / address_index`
 *
 * With the following depths:
 *
 * `0 / 1 / 2 / 3 / 4 / 5`
 *
 */
class BIP44CoinTypeNode {
    /**
     * Constructs a BIP-44 `coin_type` node. `coin_type` is the index
     * specifying the protocol for which deeper keys are intended. For the
     * authoritative list of coin types, please see
     * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).
     *
     * Recall that a BIP-44 HD tree path consists of the following nodes:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     *
     * @param nodeOrPathTuple - The {@link BIP44Node} or derivation path for the
     * key of this `coin_type` node.
     * @param coin_type - The coin_type index of this node. Must be a non-negative
     * integer.
     */
    constructor(nodeOrPathTuple, coin_type) {
        if (Array.isArray(nodeOrPathTuple)) {
            if (coin_type !== undefined) {
                throw new Error('Invalid parameters: May not specify both coin type and a derivation path. The coin type will be computed from the derivation path.');
            }
            validateCoinTypeNodeDepth(nodeOrPathTuple.length - 1);
            this[InnerNode] = new BIP44Node_1.BIP44Node({
                derivationPath: nodeOrPathTuple,
            });
            // Split the bip32 string token and extract the coin_type index
            this.coin_type = Number.parseInt(nodeOrPathTuple[exports.BIP_44_COIN_TYPE_DEPTH].split(':')[1].replace(`'`, ''), 10);
        }
        else {
            validateCoinTypeNodeDepth(nodeOrPathTuple.depth);
            validateCoinTypeParentKey(nodeOrPathTuple.key);
            const keyBuffer = nodeOrPathTuple instanceof BIP44Node_1.BIP44Node
                ? nodeOrPathTuple.keyBuffer
                : utils_1.base64StringToBuffer(nodeOrPathTuple.key);
            if (typeof coin_type !== 'number' ||
                !Number.isInteger(coin_type) ||
                coin_type < 0) {
                throw new Error('Invalid coin type: The specified coin type must be a non-negative integer number.');
            }
            this.coin_type = coin_type;
            this[InnerNode] =
                nodeOrPathTuple instanceof BIP44Node_1.BIP44Node
                    ? nodeOrPathTuple
                    : new BIP44Node_1.BIP44Node({
                        depth: exports.BIP_44_COIN_TYPE_DEPTH,
                        key: keyBuffer,
                    });
        }
        this.path = utils_1.getBIP44CoinTypePathString(this.coin_type);
        Object.freeze(this);
    }
    get depth() {
        return this[InnerNode].depth;
    }
    get key() {
        return this[InnerNode].key;
    }
    get keyBuffer() {
        return this[InnerNode].keyBuffer;
    }
    /**
     * Derives a BIP-44 `address_index` key corresponding to the path of this
     * node and the specified `account`, `change`, and `address_index` values.
     * `address_index` keys are normally the keys used to generate user account
     * addresses.
     *
     * Recall that a BIP-44 HD tree path consists of the following nodes:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     *
     * @param indices - The BIP-44 index values to use in key derivation.
     * @param indices.account - The `account` index. Default: `0`
     * @param indices.change - The `change` index. Default: `0`
     * @param indices.address_index - The `address_index` index.
     * @returns
     */
    deriveBIP44AddressKey({ account = 0, change = 0, address_index, }) {
        return this[InnerNode].derive(utils_1.getBIP44CoinTypeToAddressPathTuple({ account, change, address_index })).keyBuffer;
    }
    toJSON() {
        return Object.assign(Object.assign({}, this[InnerNode].toJSON()), { coin_type: this.coin_type, path: this.path });
    }
}
exports.BIP44CoinTypeNode = BIP44CoinTypeNode;
/**
 * Validates the depth of a `coin_type` node. Simply, ensures that it is the
 * number `2`. An error is thrown if validation fails.
 *
 * @param depth - The depth to validate.
 */
function validateCoinTypeNodeDepth(depth) {
    if (depth !== exports.BIP_44_COIN_TYPE_DEPTH) {
        throw new Error(`Invalid depth: Coin type nodes must be of depth ${exports.BIP_44_COIN_TYPE_DEPTH}. Received: "${depth}"`);
    }
}
/**
 * Validates a `coin_type` Base64 string key. "Parent" is in the name because
 * it's also in the message that's thrown on validation failure.
 *
 * @param parentKey The `coin_type` key to validate.
 */
function validateCoinTypeParentKey(parentKey) {
    if (!utils_1.isValidBase64StringKey(parentKey)) {
        throw new Error('Invalid parent key: Must be a non-zero 64-byte key.');
    }
}
/**
 * Derives a BIP-44 address key corresponding to the specified derivation path,
 * given either by a {@link BIP44CoinTypeNode} or derivation path tuple.
 *
 * Recall that a BIP-44 HD tree path consists of the following nodes:
 *
 * `m / 44' / coin_type' / account' / change / address_index`
 *
 * With the following depths:
 *
 * `0 / 1 / 2 / 3 / 4 / 5`
 *
 * @param parentKeyOrNode - The `coin_type` parent key to derive from.
 * @param indices - The `account`, `change`, and `address_index` used for
 * derivation.
 * @returns The derived `address_index` key for the specified derivation path.
 */
function deriveBIP44AddressKey(parentKeyOrNode, { account = 0, change = 0, address_index }) {
    if (typeof parentKeyOrNode === 'string') {
        validateCoinTypeParentKey(parentKeyOrNode);
    }
    else {
        validateCoinTypeNodeDepth(parentKeyOrNode.depth);
        validateCoinTypeParentKey(parentKeyOrNode.key);
    }
    let keyBuffer;
    if (parentKeyOrNode instanceof BIP44CoinTypeNode) {
        keyBuffer = parentKeyOrNode.keyBuffer;
    }
    else {
        keyBuffer = utils_1.base64StringToBuffer(typeof parentKeyOrNode === 'string'
            ? parentKeyOrNode
            : parentKeyOrNode.key);
    }
    return BIP44Node_1.deriveChildNode(keyBuffer, exports.BIP_44_COIN_TYPE_DEPTH, utils_1.getBIP44CoinTypeToAddressPathTuple({ account, change, address_index })).keyBuffer;
}
exports.deriveBIP44AddressKey = deriveBIP44AddressKey;
/**
 * Creates a function that derives BIP-44 address keys corresponding to the
 * specified derivation path, given either by a {@link BIP44CoinTypeNode} or
 * derivation path tuple.
 *
 * Recall that a BIP-44 HD tree path consists of the following nodes:
 *
 * `m / 44' / coin_type' / account' / change / address_index`
 *
 * With the following depths:
 *
 * `0 / 1 / 2 / 3 / 4 / 5`
 *
 * @param node - The {@link BIP44CoinTypeNode} to derive address keys from.
 * This node contains a BIP-44 key of depth 2, `coin_type`.
 * @param accountAndChangeIndices - The `account` and `change` indices that
 * will be used to derive addresses.
 * @returns The deriver function for the derivation path specified by the
 * `coin_type` node, `account`, and `change` indices.
 */
function getBIP44AddressKeyDeriver(node, accountAndChangeIndices) {
    const { account = 0, change = 0 } = accountAndChangeIndices || {};
    const { key, depth } = node;
    validateCoinTypeNodeDepth(depth);
    validateCoinTypeParentKey(key);
    const parentKeyBuffer = node instanceof BIP44CoinTypeNode
        ? node.keyBuffer
        : utils_1.base64StringToBuffer(key);
    const accountNode = utils_1.getHardenedBIP32NodeToken(account);
    const changeNode = utils_1.getUnhardenedBIP32NodeToken(change);
    const bip44AddressKeyDeriver = (address_index) => {
        return BIP44Node_1.deriveChildNode(parentKeyBuffer, exports.BIP_44_COIN_TYPE_DEPTH, [
            accountNode,
            changeNode,
            utils_1.getUnhardenedBIP32NodeToken(address_index),
        ]).keyBuffer;
    };
    bip44AddressKeyDeriver.coin_type = node.coin_type;
    bip44AddressKeyDeriver.path = utils_1.getBIP44ChangePathString(node.path, {
        account,
        change,
    });
    Object.freeze(bip44AddressKeyDeriver);
    return bip44AddressKeyDeriver;
}
exports.getBIP44AddressKeyDeriver = getBIP44AddressKeyDeriver;
//# sourceMappingURL=BIP44CoinTypeNode.js.map