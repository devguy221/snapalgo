{"version":3,"file":"BIP44CoinTypeNode.js","sourceRoot":"","sources":["../src/BIP44CoinTypeNode.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BIP39Node,\n  BIP44PurposeNodeToken,\n  CoinTypeHDPathString,\n  HardenedBIP32Node,\n  BIP44Depth,\n} from './constants';\nimport {\n  JsonBIP44Node,\n  BIP44Node,\n  BIP44NodeInterface,\n  deriveChildNode,\n} from './BIP44Node';\nimport {\n  base64StringToBuffer,\n  getBIP44CoinTypeToAddressPathTuple,\n  getBIP44CoinTypePathString,\n  isValidBase64StringKey,\n  CoinTypeToAddressIndices,\n  getHardenedBIP32NodeToken,\n  getUnhardenedBIP32NodeToken,\n  getBIP44ChangePathString,\n} from './utils';\n\nexport type CoinTypeHDPathTuple = [\n  BIP39Node,\n  typeof BIP44PurposeNodeToken,\n  HardenedBIP32Node,\n];\nexport const BIP_44_COIN_TYPE_DEPTH = 2;\n\nexport type JsonBIP44CoinTypeNode = JsonBIP44Node & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\nexport type BIP44CoinTypeNodeInterface = BIP44NodeInterface & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\n/**\n * Used to conceal the inner {@link BIP44Node} from consumers.\n */\nconst InnerNode = Symbol('_node');\n\n/**\n * A wrapper object for BIP-44 `coin_type` keys. `coin_type` is the index\n * specifying the protocol for which deeper keys are intended. For the\n * authoritative list of coin types, please see\n * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n */\nexport class BIP44CoinTypeNode implements BIP44CoinTypeNodeInterface {\n  private readonly [InnerNode]: BIP44Node;\n\n  public get depth(): BIP44Depth {\n    return this[InnerNode].depth;\n  }\n\n  public get key(): string {\n    return this[InnerNode].key;\n  }\n\n  public get keyBuffer(): Buffer {\n    return this[InnerNode].keyBuffer;\n  }\n\n  public readonly path: CoinTypeHDPathString;\n\n  public readonly coin_type: number;\n\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param nodeOrPathTuple - The {@link BIP44Node} or derivation path for the\n   * key of this `coin_type` node.\n   * @param coin_type - The coin_type index of this node. Must be a non-negative\n   * integer.\n   */\n  constructor(\n    nodeOrPathTuple: CoinTypeHDPathTuple | BIP44Node | JsonBIP44Node,\n    coin_type?: number,\n  ) {\n    if (Array.isArray(nodeOrPathTuple)) {\n      if (coin_type !== undefined) {\n        throw new Error(\n          'Invalid parameters: May not specify both coin type and a derivation path. The coin type will be computed from the derivation path.',\n        );\n      }\n\n      validateCoinTypeNodeDepth(nodeOrPathTuple.length - 1);\n\n      this[InnerNode] = new BIP44Node({\n        derivationPath: nodeOrPathTuple,\n      });\n\n      // Split the bip32 string token and extract the coin_type index\n      this.coin_type = Number.parseInt(\n        nodeOrPathTuple[BIP_44_COIN_TYPE_DEPTH].split(':')[1].replace(`'`, ''),\n        10,\n      );\n    } else {\n      validateCoinTypeNodeDepth(nodeOrPathTuple.depth);\n      validateCoinTypeParentKey(nodeOrPathTuple.key);\n\n      const keyBuffer =\n        nodeOrPathTuple instanceof BIP44Node\n          ? nodeOrPathTuple.keyBuffer\n          : base64StringToBuffer(nodeOrPathTuple.key);\n\n      if (\n        typeof coin_type !== 'number' ||\n        !Number.isInteger(coin_type) ||\n        coin_type < 0\n      ) {\n        throw new Error(\n          'Invalid coin type: The specified coin type must be a non-negative integer number.',\n        );\n      }\n      this.coin_type = coin_type;\n\n      this[InnerNode] =\n        nodeOrPathTuple instanceof BIP44Node\n          ? nodeOrPathTuple\n          : new BIP44Node({\n              depth: BIP_44_COIN_TYPE_DEPTH,\n              key: keyBuffer,\n            });\n    }\n\n    this.path = getBIP44CoinTypePathString(this.coin_type);\n    Object.freeze(this);\n  }\n\n  /**\n   * Derives a BIP-44 `address_index` key corresponding to the path of this\n   * node and the specified `account`, `change`, and `address_index` values.\n   * `address_index` keys are normally the keys used to generate user account\n   * addresses.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param indices - The BIP-44 index values to use in key derivation.\n   * @param indices.account - The `account` index. Default: `0`\n   * @param indices.change - The `change` index. Default: `0`\n   * @param indices.address_index - The `address_index` index.\n   * @returns\n   */\n  deriveBIP44AddressKey({\n    account = 0,\n    change = 0,\n    address_index,\n  }: CoinTypeToAddressIndices): Buffer {\n    return this[InnerNode].derive(\n      getBIP44CoinTypeToAddressPathTuple({ account, change, address_index }),\n    ).keyBuffer;\n  }\n\n  toJSON(): JsonBIP44CoinTypeNode {\n    return {\n      ...this[InnerNode].toJSON(),\n      coin_type: this.coin_type,\n      path: this.path,\n    };\n  }\n}\n\n/**\n * Validates the depth of a `coin_type` node. Simply, ensures that it is the\n * number `2`. An error is thrown if validation fails.\n *\n * @param depth - The depth to validate.\n */\nfunction validateCoinTypeNodeDepth(depth: number) {\n  if (depth !== BIP_44_COIN_TYPE_DEPTH) {\n    throw new Error(\n      `Invalid depth: Coin type nodes must be of depth ${BIP_44_COIN_TYPE_DEPTH}. Received: \"${depth}\"`,\n    );\n  }\n}\n\n/**\n * Validates a `coin_type` Base64 string key. \"Parent\" is in the name because\n * it's also in the message that's thrown on validation failure.\n *\n * @param parentKey The `coin_type` key to validate.\n */\nfunction validateCoinTypeParentKey(parentKey: string) {\n  if (!isValidBase64StringKey(parentKey)) {\n    throw new Error('Invalid parent key: Must be a non-zero 64-byte key.');\n  }\n}\n\n/**\n * Derives a BIP-44 address key corresponding to the specified derivation path,\n * given either by a {@link BIP44CoinTypeNode} or derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param parentKeyOrNode - The `coin_type` parent key to derive from.\n * @param indices - The `account`, `change`, and `address_index` used for\n * derivation.\n * @returns The derived `address_index` key for the specified derivation path.\n */\nexport function deriveBIP44AddressKey(\n  parentKeyOrNode: string | BIP44CoinTypeNode | JsonBIP44CoinTypeNode,\n  { account = 0, change = 0, address_index }: CoinTypeToAddressIndices,\n): Buffer {\n  if (typeof parentKeyOrNode === 'string') {\n    validateCoinTypeParentKey(parentKeyOrNode);\n  } else {\n    validateCoinTypeNodeDepth(parentKeyOrNode.depth);\n    validateCoinTypeParentKey(parentKeyOrNode.key);\n  }\n\n  let keyBuffer: Buffer;\n  if (parentKeyOrNode instanceof BIP44CoinTypeNode) {\n    keyBuffer = parentKeyOrNode.keyBuffer;\n  } else {\n    keyBuffer = base64StringToBuffer(\n      typeof parentKeyOrNode === 'string'\n        ? parentKeyOrNode\n        : parentKeyOrNode.key,\n    );\n  }\n\n  return deriveChildNode(\n    keyBuffer,\n    BIP_44_COIN_TYPE_DEPTH,\n    getBIP44CoinTypeToAddressPathTuple({ account, change, address_index }),\n  ).keyBuffer;\n}\n\ninterface BIP44AddressKeyDeriver {\n  /**\n   * @param address_index - The `address_index` value.\n   * @returns The key corresponding to the path of this deriver and the\n   * specified `address_index` value.\n   */\n  (address_index: number): Buffer;\n\n  /**\n   * A human-readable representation of the derivation path of this deriver\n   * function, excluding the `address_index`, which is parameterized.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  path: ReturnType<typeof getBIP44ChangePathString>;\n\n  /**\n   * The `coin_type` index of addresses derived by this deriver function.\n   */\n  coin_type: number;\n}\n\n/**\n * Creates a function that derives BIP-44 address keys corresponding to the\n * specified derivation path, given either by a {@link BIP44CoinTypeNode} or\n * derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param node - The {@link BIP44CoinTypeNode} to derive address keys from.\n * This node contains a BIP-44 key of depth 2, `coin_type`.\n * @param accountAndChangeIndices - The `account` and `change` indices that\n * will be used to derive addresses.\n * @returns The deriver function for the derivation path specified by the\n * `coin_type` node, `account`, and `change` indices.\n */\nexport function getBIP44AddressKeyDeriver(\n  node: BIP44CoinTypeNode | JsonBIP44CoinTypeNode,\n  accountAndChangeIndices?: Omit<CoinTypeToAddressIndices, 'address_index'>,\n) {\n  const { account = 0, change = 0 } = accountAndChangeIndices || {};\n  const { key, depth } = node;\n  validateCoinTypeNodeDepth(depth);\n  validateCoinTypeParentKey(key);\n\n  const parentKeyBuffer =\n    node instanceof BIP44CoinTypeNode\n      ? node.keyBuffer\n      : base64StringToBuffer(key);\n\n  const accountNode = getHardenedBIP32NodeToken(account);\n  const changeNode = getUnhardenedBIP32NodeToken(change);\n\n  const bip44AddressKeyDeriver = (address_index: number): Buffer => {\n    return deriveChildNode(parentKeyBuffer, BIP_44_COIN_TYPE_DEPTH, [\n      accountNode,\n      changeNode,\n      getUnhardenedBIP32NodeToken(address_index),\n    ]).keyBuffer;\n  };\n\n  bip44AddressKeyDeriver.coin_type = node.coin_type;\n  bip44AddressKeyDeriver.path = getBIP44ChangePathString(node.path, {\n    account,\n    change,\n  });\n  Object.freeze(bip44AddressKeyDeriver);\n  return bip44AddressKeyDeriver as BIP44AddressKeyDeriver;\n}\n"]}