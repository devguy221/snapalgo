/// <reference types="node" />
import { BIP44Depth, PartialHDPathTuple, RootedHDPathTuple } from './constants';
/**
 * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.
 * cryptographic keys used to generate keypairs and addresses for cryptocurrency
 * protocols.
 */
export interface JsonBIP44Node {
    /**
     * The 0-indexed BIP-44 path depth of this node.
     *
     * A BIP-44 path is of the form:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     */
    readonly depth: BIP44Depth;
    /**
     * The Base64 string representation of the key material for this node.
     */
    readonly key: string;
}
export declare type BIP44NodeInterface = JsonBIP44Node & {
    /**
     * The raw bytes of the key material for this node, as a Node.js Buffer or
     * browser-equivalent.
     */
    keyBuffer: Buffer;
    /**
     * @returns A JSON-compatible representation of this node's data fields.
     */
    toJSON(): JsonBIP44Node;
};
interface BIP44NodeOptions {
    readonly depth?: BIP44Depth;
    readonly key?: Buffer | string;
    readonly derivationPath?: RootedHDPathTuple;
}
/**
 * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.
 * cryptographic keys used to generate keypairs and addresses for cryptocurrency
 * protocols.
 *
 * This class contains methods and fields that may not serialize well. Use
 * {@link BIP44Node.toJSON} to get a JSON-compatible representation.
 */
export declare class BIP44Node implements BIP44NodeInterface {
    readonly depth: BIP44Depth;
    get key(): string;
    readonly keyBuffer: Buffer;
    /**
     * Initializes a BIP-44 node. Accepts either:
     * - An existing 64-byte BIP-44 key, and its **0-indexed** BIP-44 path depth.
     *   - The key may be in the form of a hexadecimal string, Base64 string, or a
     *     {@link Buffer}.
     * - A BIP-44 derivation path starting with an `m` node.
     *   - At present, the `m` node must be a BIP-39 node, given as a string of
     *     the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list
     *     of BIP-39 seed phrase words.
     *
     * All parameters are stringently validated, and an error is thrown if
     * validation fails.
     *
     * Recall that a BIP-44 HD tree path consists of the following nodes:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     *
     * @param options - Options bag.
     * @param options.depth - The 0-indexed BIP-44 tree depth of the `key`, if
     * specified.
     * @param options.key - The key of this node. Mutually exclusive with
     * `derivationPath`, and requires a `depth` to be specified.
     * @param options.derivationPath - The rooted HD tree path that will be used
     * to derive the key of this node. Mutually exclusive with `key`.
     */
    constructor({ depth, key, derivationPath }: BIP44NodeOptions);
    /**
     * Constructor helper for validating and parsing the `key` parameter. An error
     * is thrown if validation fails.
     *
     * @param key - The key to parse.
     * @returns A {@link Buffer}, or `undefined` if no key parameter was
     * specified.
     */
    private static _parseKey;
    /**
     * Derives a child of the key contains be this node and returns a new
     * {@link BIP44Node} containing the child key.
     *
     * The specified path must be a valid HD path from this node, per BIP-44.
     * At present, this means that the path must consist of no more than 5 BIP-32
     * nodes, depending on the depth of this node.
     *
     * Recall that a BIP-44 HD tree path consists of the following nodes:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     *
     * @param path - The partial (non-rooted) BIP-44 HD tree path will be used
     * to derive a child key from the parent key contained within this node.
     * @returns The {@link BIP44Node} corresponding to the derived child key.
     */
    derive(path: PartialHDPathTuple): BIP44Node;
    toJSON(): JsonBIP44Node;
}
/**
 * Derives a child key from the given parent key, as a {@link BIP44Node}.
 * @param parentKey - The parent key to derive from.
 * @param parentDepth - The depth of the parent key.
 * @param pathToChild - The path to the child node / key.
 * @returns The {@link BIP44Node} corresponding to the derived child key.
 */
export declare function deriveChildNode(parentKey: Buffer, parentDepth: BIP44Depth, pathToChild: PartialHDPathTuple): BIP44Node;
export {};
