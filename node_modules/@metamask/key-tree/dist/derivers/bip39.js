"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBip39KeyFromSeed = exports.deriveChildKey = exports.bip39MnemonicToMultipath = void 0;
const crypto_1 = __importDefault(require("crypto"));
const bip39_1 = require("bip39");
// This magic constant is analogous to a salt, and is consistent across all
// major BIP-32 implementations.
const ROOT_BASE_SECRET = Buffer.from('Bitcoin seed', 'utf8');
/**
 * @param mnemonic
 */
function bip39MnemonicToMultipath(mnemonic) {
    return `bip39:${mnemonic.toLowerCase().trim()}`;
}
exports.bip39MnemonicToMultipath = bip39MnemonicToMultipath;
// this creates a child key using bip39, ignoring the parent key
/**
 * @param pathPart
 * @param _parentKey
 */
function deriveChildKey(pathPart, _parentKey) {
    return createBip39KeyFromSeed(bip39_1.mnemonicToSeedSync(pathPart));
}
exports.deriveChildKey = deriveChildKey;
/**
 * @param seed - The cryptographic seed bytes.
 * @returns The bytes of the corresponding BIP-39 master key.
 */
function createBip39KeyFromSeed(seed) {
    return crypto_1.default.createHmac('sha512', ROOT_BASE_SECRET).update(seed).digest();
}
exports.createBip39KeyFromSeed = createBip39KeyFromSeed;
//# sourceMappingURL=bip39.js.map