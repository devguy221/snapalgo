{"version":3,"file":"bip39.js","sourceRoot":"","sources":["../../src/derivers/bip39.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,iCAA2C;AAG3C,2EAA2E;AAC3E,gCAAgC;AAChC,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AAE7D;;GAEG;AACH,SAAgB,wBAAwB,CAAC,QAAgB;IACvD,OAAO,SAAS,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AAClD,CAAC;AAFD,4DAEC;AAED,gEAAgE;AAChE;;;GAGG;AACH,SAAgB,cAAc,CAAC,QAAgB,EAAE,UAAkB;IACjE,OAAO,sBAAsB,CAAC,0BAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9D,CAAC;AAFD,wCAEC;AAED;;;GAGG;AACH,SAAgB,sBAAsB,CAAC,IAAY;IACjD,OAAO,gBAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;AAC7E,CAAC;AAFD,wDAEC","sourcesContent":["import crypto from 'crypto';\nimport { mnemonicToSeedSync } from 'bip39';\nimport { BIP39Node } from '../constants';\n\n// This magic constant is analogous to a salt, and is consistent across all\n// major BIP-32 implementations.\nconst ROOT_BASE_SECRET = Buffer.from('Bitcoin seed', 'utf8');\n\n/**\n * @param mnemonic\n */\nexport function bip39MnemonicToMultipath(mnemonic: string): BIP39Node {\n  return `bip39:${mnemonic.toLowerCase().trim()}`;\n}\n\n// this creates a child key using bip39, ignoring the parent key\n/**\n * @param pathPart\n * @param _parentKey\n */\nexport function deriveChildKey(pathPart: string, _parentKey?: never): Buffer {\n  return createBip39KeyFromSeed(mnemonicToSeedSync(pathPart));\n}\n\n/**\n * @param seed - The cryptographic seed bytes.\n * @returns The bytes of the corresponding BIP-39 master key.\n */\nexport function createBip39KeyFromSeed(seed: Buffer): Buffer {\n  return crypto.createHmac('sha512', ROOT_BASE_SECRET).update(seed).digest();\n}\n"]}