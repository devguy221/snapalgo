/// <reference types="node" />
import { UnhardenedBIP32Node, CoinTypeHDPathString, CoinTypeToAddressTuple, HardenedBIP32Node, ChangeHDPathString } from './constants';
/**
 * Gets a string representation of a BIP-44 path of depth 2, i.e.:
 * `m / 44' / coin_type'`
 *
 * For display purposes only.
 *
 * @param coin_type - The `coin_type` index to create a path visualization for.
 * @returns The visualization of the BIP-44 path for thte specified `coin_type`.
 */
export declare function getBIP44CoinTypePathString(coin_type: number): CoinTypeHDPathString;
interface BIP44PathIndices {
    coin_type: number;
    account?: number;
    change?: number;
    address_index: number;
}
export declare type CoinTypeToAddressIndices = Pick<BIP44PathIndices, 'account' | 'change' | 'address_index'>;
/**
 * Gets a string representation of a BIP-44 path of depth 4, i.e.:
 * `m / 44' / coin_type' / account' / change`
 *
 * For display purposes only.
 *
 * @param coinTypePath - The parent `coin_type` path.
 * @param coin_type - The `change` index to create a path visualization for.
 * @returns The visualization of the BIP-44 path for the specified `coin_type`
 * and `change` indices.
 */
export declare function getBIP44ChangePathString(coinTypePath: CoinTypeHDPathString, indices: Omit<CoinTypeToAddressIndices, 'address_index'>): ChangeHDPathString;
/**
 * Gets a BIP-44 path tuple of the form `account' / change / address_index`,
 * which can be used to derive address keys together with a `coin_type` key.
 *
 * @param indices - The BIP-44 derivation index values.
 * @param indices.account - The `account` index value.
 * @param indices.change - The `change` index value.
 * @param indices.address_index - The `address_index` index value.
 * @returns The `account' / change / address_index` path corresponding to the
 * specified indices.
 */
export declare function getBIP44CoinTypeToAddressPathTuple({ account, change, address_index, }: CoinTypeToAddressIndices): CoinTypeToAddressTuple;
/**
 * A hardened BIP-32 node token, e.g. `bip32:0'`.
 * Validates that the index is a non-negative integer number, and throws an
 * error if validation fails.
 *
 * @param index - The index of the node.
 * @returns The hardened BIP-32 node token.
 */
export declare function getHardenedBIP32NodeToken(index: number): HardenedBIP32Node;
/**
 * An unhardened BIP-32 node token, e.g. `bip32:0`.
 * Validates that the index is a non-negative integer number, and throws an
 * error if validation fails.
 *
 * @param index - The index of the node.
 * @returns The unhardened BIP-32 node token.
 */
export declare function getUnhardenedBIP32NodeToken(index: number): UnhardenedBIP32Node;
/**
 * Validates that the index is a non-negative integer number. Throws an
 * error if validation fails.
 *
 * @param addressIndex - The index to validate.
 */
export declare function validateBIP32Index(addressIndex: number): void;
/**
 * @param index - The BIP-32 index to test.
 * @returns Whether the index is a non-negative integer number.
 */
export declare function isValidBIP32Index(index: number): boolean;
/**
 * @param bip32Token - The token to test.
 * @returns Whether the token is hardened, i.e. ends with `'`.
 */
export declare function isHardened(bip32Token: string): boolean;
/**
 * @param hexString - The hexadecimal string to strip.
 * @returns The hexadecimal string, without a `0x`-prefix, if any.
 */
export declare function stripHexPrefix(hexString: string): string;
/**
 * Tests whether the specified string is a valid hexadecimal string. The string
 * may or may not be `0x`-prefixed, and the test is case-insensitive.
 *
 * @param hexString - The string to test.
 * @returns Whether the specified string is a valid hexadecimal string. The
 * string may or may not be `0x`-prefixed.
 */
export declare function isValidHexString(hexString: string): boolean;
/**
 * @param base64String - The Base64 string to convert.
 * @returns The {@link Buffer} corresponding to the Base64 string.
 */
export declare function base64StringToBuffer(base64String: string): Buffer;
/**
 * @param hexString - The hexadecimal string to convert.
 * @returns The {@link Buffer} corresponding to the hexadecimal string.
 */
export declare function hexStringToBuffer(hexString: string): Buffer;
/**
 * @param input - The {@link Buffer} to convert.
 * @returns The buffer as a Base64 string.
 */
export declare function bufferToBase64String(input: Buffer): string;
/**
 * Tests whether the specified {@link Buffer} is a valid BIP-32 key.
 * A valid buffer key is 64 bytes long and has at least one non-zero byte.
 *
 * @param buffer - The {@link Buffer} to test.
 * @returns Whether the buffer represents a valid BIP-32 key.
 */
export declare function isValidBufferKey(buffer: Buffer): boolean;
/**
 * Tests whether the specified hexadecimal string is a valid BIP-32 key.
 * A valid hexadecimal string key is 128 characters long (excluding any `0x`
 * prefix) and has at least one non-zero byte.
 *
 * @param stringKey - The hexadecimal string to test.
 * @returns Whether the string represents a valid BIP-32 key.
 */
export declare function isValidHexStringKey(stringKey: string): boolean;
/**
 * Tests whether the specified Base64 string is a valid BIP-32 key.
 * A valid Base64 string key is 88 characters long and has at least one non-zero
 * byte.
 *
 * @param stringKey - The Base64 string to test.
 * @returns Whether the string represents a valid BIP-32 key.
 */
export declare function isValidBase64StringKey(stringKey: string): boolean;
export {};
