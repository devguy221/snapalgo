/// <reference types="node" />
import { Duplex } from 'stream';
import { ObservableStore } from '@metamask/obs-store';
import { WorkerParentPostMessageStream } from '@metamask/post-message-stream';
import { ExecutionServiceMessenger } from '@metamask/snap-types';
import { JsonRpcEngine } from 'json-rpc-engine';
import { AbstractExecutionService, SetupSnapProvider } from './AbstractExecutionService';
interface WorkerControllerArgs {
    setupSnapProvider: SetupSnapProvider;
    workerUrl: URL;
    messenger: ExecutionServiceMessenger;
    unresponsivePollingInterval?: number;
    unresponsiveTimeout?: number;
}
interface WorkerStreams {
    command: Duplex;
    rpc: Duplex | null;
    _connection: WorkerParentPostMessageStream;
}
interface WorkerWrapper {
    id: string;
    streams: WorkerStreams;
    rpcEngine: JsonRpcEngine;
    worker: Worker;
}
export declare class WebWorkerExecutionService extends AbstractExecutionService<WorkerWrapper> {
    store: ObservableStore<{
        workers: Record<string, WorkerWrapper>;
    }>;
    private workerUrl;
    constructor({ setupSnapProvider, workerUrl, messenger, unresponsivePollingInterval, unresponsiveTimeout, }: WorkerControllerArgs);
    private _setWorker;
    private _deleteWorker;
    protected _terminate(workerWrapper: WorkerWrapper): void;
    protected _initJob(): Promise<WorkerWrapper>;
    _initWorkerStreams(worker: Worker, workerId: string): WorkerStreams;
}
export {};
