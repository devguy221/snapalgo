/// <reference types="node" />
import { Duplex } from 'stream';
import { WindowPostMessageStream } from '@metamask/post-message-stream';
import { ExecutionServiceMessenger } from '@metamask/snap-types';
import { JsonRpcEngine } from 'json-rpc-engine';
import { AbstractExecutionService, SetupSnapProvider } from '../AbstractExecutionService';
declare type IframeExecutionEnvironmentServiceArgs = {
    createWindowTimeout?: number;
    setupSnapProvider: SetupSnapProvider;
    iframeUrl: URL;
    messenger: ExecutionServiceMessenger;
};
declare type JobStreams = {
    command: Duplex;
    rpc: Duplex | null;
    _connection: WindowPostMessageStream;
};
declare type EnvMetadata = {
    id: string;
    streams: JobStreams;
    rpcEngine: JsonRpcEngine;
};
export declare class IframeExecutionService extends AbstractExecutionService<EnvMetadata> {
    _iframeWindow?: Window;
    iframeUrl: URL;
    constructor({ setupSnapProvider, iframeUrl, messenger, }: IframeExecutionEnvironmentServiceArgs);
    protected _terminate(jobWrapper: EnvMetadata): void;
    protected _initJob(): Promise<EnvMetadata>;
    private _initStreams;
    /**
     * Creates the iframe to be used as the execution environment
     * This may run forever if the iframe never loads, but the promise should be wrapped in an initialization timeout in the SnapController
     *
     * @param uri - The iframe URI
     * @param jobId - The job id
     */
    private _createWindow;
}
export {};
