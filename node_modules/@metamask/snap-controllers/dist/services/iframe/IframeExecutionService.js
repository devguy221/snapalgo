"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IframeExecutionService = void 0;
const post_message_stream_1 = require("@metamask/post-message-stream");
const execution_environments_1 = require("@metamask/execution-environments");
const json_rpc_engine_1 = require("json-rpc-engine");
const json_rpc_middleware_stream_1 = require("json-rpc-middleware-stream");
const nanoid_1 = require("nanoid");
const pump_1 = __importDefault(require("pump"));
const AbstractExecutionService_1 = require("../AbstractExecutionService");
class IframeExecutionService extends AbstractExecutionService_1.AbstractExecutionService {
    constructor({ setupSnapProvider, iframeUrl, messenger, }) {
        super({
            setupSnapProvider,
            messenger,
        });
        this.iframeUrl = iframeUrl;
    }
    _terminate(jobWrapper) {
        document.getElementById(jobWrapper.id)?.remove();
    }
    async _initJob() {
        const jobId = (0, nanoid_1.nanoid)();
        const streams = await this._initStreams(jobId);
        const rpcEngine = new json_rpc_engine_1.JsonRpcEngine();
        const jsonRpcConnection = (0, json_rpc_middleware_stream_1.createStreamMiddleware)();
        (0, pump_1.default)(jsonRpcConnection.stream, streams.command, jsonRpcConnection.stream);
        rpcEngine.push(jsonRpcConnection.middleware);
        const envMetadata = {
            id: jobId,
            streams,
            rpcEngine,
        };
        this.jobs.set(jobId, envMetadata);
        return envMetadata;
    }
    async _initStreams(jobId) {
        this._iframeWindow = await this._createWindow(this.iframeUrl.toString(), jobId);
        const envStream = new post_message_stream_1.WindowPostMessageStream({
            name: 'parent',
            target: 'child',
            targetWindow: this._iframeWindow,
        });
        // Typecast justification: stream type mismatch
        const mux = (0, AbstractExecutionService_1.setupMultiplex)(envStream, `Job: "${jobId}"`);
        const commandStream = mux.createStream(execution_environments_1.SNAP_STREAM_NAMES.COMMAND);
        // Handle out-of-band errors, i.e. errors thrown from the snap outside of the req/res cycle.
        const errorHandler = (data) => {
            if (data.error &&
                (data.id === null || data.id === undefined) // only out of band errors (i.e. no id)
            ) {
                const snapId = this.jobToSnapMap.get(jobId);
                if (snapId) {
                    this._messenger.publish('ExecutionService:unhandledError', snapId, data.error);
                }
                commandStream.removeListener('data', errorHandler);
            }
        };
        commandStream.on('data', errorHandler);
        const rpcStream = mux.createStream(execution_environments_1.SNAP_STREAM_NAMES.JSON_RPC);
        // Typecast: stream type mismatch
        return {
            command: commandStream,
            rpc: rpcStream,
            _connection: envStream,
        };
    }
    /**
     * Creates the iframe to be used as the execution environment
     * This may run forever if the iframe never loads, but the promise should be wrapped in an initialization timeout in the SnapController
     *
     * @param uri - The iframe URI
     * @param jobId - The job id
     */
    _createWindow(uri, jobId) {
        const iframe = document.createElement('iframe');
        return new Promise((resolve) => {
            iframe.addEventListener('load', () => {
                if (iframe.contentWindow) {
                    resolve(iframe.contentWindow);
                }
            });
            // Set attributes before adding the iframe to the DOM to trigger 'load' event once everything has been loaded.
            iframe.setAttribute('src', uri);
            iframe.setAttribute('id', jobId);
            iframe.setAttribute('sandbox', 'allow-scripts');
            document.body.appendChild(iframe);
        });
    }
}
exports.IframeExecutionService = IframeExecutionService;
//# sourceMappingURL=IframeExecutionService.js.map