"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// fix for jsdom does not setting event.origin or event.source: https://github.com/jsdom/jsdom/issues/2745
const fixJSDOMPostMessageEventSource = (iframeExecutionService) => {
    const oldCreateWindow = iframeExecutionService._createWindow;
    iframeExecutionService._createWindow = async (uri, envId, timeout) => {
        const result = await oldCreateWindow(uri, envId, timeout);
        const scriptElement = result.document.createElement('script');
        if (!scriptElement) {
            return result;
        }
        // fix the inside window
        scriptElement.textContent = `
    window.addEventListener('message', (postMessageEvent) => {
      if (postMessageEvent.source === null && !postMessageEvent.origin) {
        let source;
        let postMessageEventOrigin;
        if (postMessageEvent.data.target === 'child') {
          source = window.parent;
          postMessageEventOrigin = '*';
        } else if (postMessageEvent.data.target === 'parent') {
          source = window;
          postMessageEventOrigin = window.location.origin;
        }
        if (postMessageEvent.data.target) {
          postMessageEvent.stopImmediatePropagation();
          const args = Object.assign({
            ...postMessageEvent,
            data: postMessageEvent.data,
            source,
            origin: postMessageEventOrigin,
          });
          const postMessageEventWithOrigin = new MessageEvent(
            'message',
            args,
          );
          window.dispatchEvent(postMessageEventWithOrigin);
        }
      }
    });
  `;
        result.document.body.appendChild(scriptElement);
        return result;
    };
    const listener = (event) => {
        if (event.source === null && !event.origin) {
            let source;
            let origin;
            if (event.data.target === 'child') {
                source = window;
                origin = window.location.origin;
            }
            else if (event.data.target === 'parent') {
                source = iframeExecutionService._iframeWindow;
                origin = iframeExecutionService.iframeUrl.toString();
            }
            if (event.data.target) {
                event.stopImmediatePropagation();
                const args = Object.assign(Object.assign(Object.assign({}, event), { data: event.data, source,
                    origin }));
                const eventWithOrigin = new MessageEvent('message', args);
                window.dispatchEvent(eventWithOrigin);
            }
        }
    };
    window.addEventListener('message', listener);
    return () => {
        window.removeEventListener('message', listener);
    };
};
exports.default = fixJSDOMPostMessageEventSource;
//# sourceMappingURL=fixJSDOMPostMessageEventSource.js.map