"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = void 0;
const http_1 = __importDefault(require("http"));
const util_1 = require("util");
const path_1 = __importDefault(require("path"));
const serve_handler_1 = __importDefault(require("serve-handler"));
let server;
async function start(port = 6363) {
    return new Promise((resolve, reject) => {
        if (!Number.isSafeInteger(port) || port < 0) {
            reject(new Error(`Invalid port: "${port}"`));
        }
        const bundlePath = require.resolve('@metamask/execution-environments/dist/webpack/iframe/bundle.js');
        const publicPath = path_1.default.resolve(bundlePath, '../');
        server = http_1.default.createServer(async (req, res) => {
            await (0, serve_handler_1.default)(req, res, {
                public: publicPath,
                headers: [
                    {
                        source: '**/*',
                        headers: [
                            {
                                key: 'Cache-Control',
                                value: 'no-cache',
                            },
                        ],
                    },
                ],
            });
        });
        server.listen({ port }, () => {
            console.log(`Server listening on: http://localhost:${port}`);
            resolve();
        });
        server.on('error', (error) => {
            console.error('Server error', error);
            reject(error);
        });
        server.on('close', () => {
            console.log('Server closed');
            reject(new Error('Server closed'));
        });
    });
}
exports.start = start;
async function stop() {
    const close = (0, util_1.promisify)(server.close);
    await close();
}
exports.stop = stop;
//# sourceMappingURL=server.js.map