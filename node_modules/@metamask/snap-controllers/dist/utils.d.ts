import { Json } from '@metamask/controllers';
/**
 * @param timestamp - A Unix millisecond timestamp.
 * @returns The number of milliseconds elapsed since the specified timestamp.
 */
export declare function timeSince(timestamp: number): number;
declare type PlainObject = Record<number | string | symbol, unknown>;
export declare function isPlainObject(value: unknown): value is PlainObject;
export declare const hasProperty: (object: PlainObject, key: string | number | symbol) => boolean;
/**
 * Like {@link Array}, but always non-empty.
 *
 * @template T - The non-empty array member type.
 */
export declare type NonEmptyArray<T> = [T, ...T[]];
/**
 * {@link NonEmptyArray} type guard.
 *
 * @template T - The non-empty array member type.
 * @param value - The value to check.
 * @returns Whether the value is a non-empty array.
 */
export declare function isNonEmptyArray<T>(value: T[]): value is NonEmptyArray<T>;
/**
 * {@link Json} type guard.
 *
 * @param value - The value to check.
 * @returns Whether the value is valid JSON.
 */
export declare function isValidJson(value: unknown): value is Json;
/**
 * Makes every specified property of the specified object type mutable.
 *
 * @template T - The object whose readonly properties to make mutable.
 * @template TargetKey - The property key(s) to make mutable.
 */
export declare type Mutable<T extends Record<string, unknown>, TargetKey extends string> = {
    -readonly [Key in keyof Pick<T, TargetKey>]: T[Key];
} & {
    [Key in keyof Omit<T, TargetKey>]: T[Key];
};
export {};
