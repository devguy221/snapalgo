"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertExhaustive = exports.setDiff = void 0;
/**
 * Takes two objects and does a Set Difference of them.
 * Set Difference is generally defined as follows:
 * ```
 * 𝑥 ∈ A ∖ B ⟺ 𝑥 ∈ A ∧ 𝑥 ∉ B
 * ```
 * Meaning that the returned object contains all properties of A expect those that also
 * appear in B. Notice that properties that appear in B, but not in A, have no effect.
 *
 * @see [Set Difference]{@link https://proofwiki.org/wiki/Definition:Set_Difference}
 *
 * @param objectA The object on which the difference is being calculated
 * @param objectB The object whose properties will be removed from objectA
 * @returns objectA without properties from objectB
 */
function setDiff(objectA, objectB) {
    return Object.entries(objectA).reduce((acc, [key, value]) => {
        if (!(key in objectB)) {
            acc[key] = value;
        }
        return acc;
    }, {});
}
exports.setDiff = setDiff;
/**
 * Use in the default case of a switch that you want to be fully exhaustive.
 * Using this function forces the compiler to enforces exhaustivity during compile-time
 *
 * @example
 * ```
 * const snapPrefix = snapIdToSnapPrefix(snapId);
 * switch (snapPrefix) {
 *   case SnapIdPrefixes.local:
 *     ...
 *   case SnapIdPrefixes.npm:
 *     ...
 *   default:
 *     assertExhaustive(snapPrefix);
 * }
 * ```
 *
 * @param _ The object on which the switch is being operated
 */
/* istanbul ignore next */
function assertExhaustive(_) {
    throw new Error('Invalid branch reached. Should be detected during compilation');
}
exports.assertExhaustive = assertExhaustive;
//# sourceMappingURL=utils.js.map