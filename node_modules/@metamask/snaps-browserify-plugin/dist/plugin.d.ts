/// <reference types="node" />
import { Transform, TransformCallback } from 'stream';
import { BrowserifyObject } from 'browserify';
import { PostProcessOptions } from '@metamask/snap-utils';
export declare type Options = PostProcessOptions;
/**
 * A transform stream which can be used a the Browserify pipeline. It accepts a
 * string input, which is post-processed and pushed to the output stream.
 */
export declare class SnapsBrowserifyTransform extends Transform {
    #private;
    /**
     * @param options - The post-processing options.
     */
    constructor(options?: Partial<Options>);
    _transform(chunk: Buffer, _: BufferEncoding, callback: TransformCallback): void;
    _flush(callback: TransformCallback): void;
}
/**
 * The Browserify plugin function. Can be passed to the Browserify `plugin`
 * function, or used by simply passing the package name to `plugin`.
 *
 * @param browserify
 * @param options
 */
export default function plugin(browserify: BrowserifyObject, options: Partial<Options>): void;
