{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;;;;;AAAA,kDAAyC;AAEzC,0DAAkC;AAClC,mCAAsE;AAEtE,SAAgB,GAAG,CAAC,IAAc,EAAE,QAAa;IAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,oEAAoE;IACpE,eAAK,CAAC,OAAO,CAAC;SACX,KAAK,CAAC,+BAA+B,CAAC;SAEtC,OAAO,CAAC,SAAS,EAAE,wCAAwC,CAAC;SAC5D,OAAO,CACN,iCAAiC,EACjC,6CAA6C,CAC9C;SACA,OAAO,CACN,4CAA4C,EAC5C,2CAA2C,CAC5C;SACA,OAAO,CAAC,iBAAiB,EAAE,uCAAuC,CAAC;SACnE,OAAO,CAAC,yBAAyB,EAAE,uCAAuC,CAAC;SAC3E,OAAO,CACN,iCAAiC,EACjC,gGAAgG,CACjG;SAEA,OAAO,CAAC,QAAQ,CAAC;SAEjB,MAAM,CAAC,eAAe,EAAE,kBAAQ,CAAC,aAAa,CAAC;SAE/C,MAAM,CAAC,kBAAkB,EAAE,kBAAQ,CAAC,gBAAgB,CAAC;SAErD,MAAM,EAAE;QAET,gEAAgE;QAChE,+EAA+E;QAC/E,0FAA0F;SACzF,UAAU,CACT,CAAC,CAAC,SAAoB,EAAE,aAA+B,EAAE,EAAE;QACzD,mBAAW,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC/C,sBAAc,CAAC,SAAS,CAAC,CAAC;QAC1B,sBAAc,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC,CAAQ,EACT,IAAI,CACL;SAEA,IAAI,CAAC,CAAC,GAAW,EAAE,GAAU,EAAE,MAAM,EAAE,EAAE;QACxC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,KAAI,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE;YAC5C,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC;SAED,aAAa,CAAC,CAAC,EAAE,wCAAwC,CAAC;SAE1D,IAAI,EAAE;SACN,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;AAC7B,CAAC;AAtDD,kBAsDC","sourcesContent":["import yargs, { Arguments } from 'yargs';\nimport yargsType from 'yargs/yargs';\nimport builders from './builders';\nimport { applyConfig, sanitizeInputs, setSnapGlobals } from './utils';\n\nexport function cli(argv: string[], commands: any): void {\n  const rawArgv = argv.slice(2);\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  yargs(rawArgv)\n    .usage('Usage: $0 <command> [options]')\n\n    .example('$0 init', `\\tInitialize Snap package from scratch`)\n    .example(\n      '$0 build -s src/index.js -d out',\n      `\\tBuild 'src/index.js' as './out/bundle.js'`,\n    )\n    .example(\n      '$0 build -s src/index.js -d out -n snap.js',\n      `\\tBuild 'src/index.js' as './out/snap.js'`,\n    )\n    .example('$0 serve -r out', `\\tServe files in './out' on port 8080`)\n    .example('$0 serve -r out -p 9000', `\\tServe files in './out' on port 9000`)\n    .example(\n      '$0 watch -s src/index.js -d out',\n      `\\tRebuild './out/bundle.js' on changes to files in 'src/index.js' parent and child directories`,\n    )\n\n    .command(commands)\n\n    .option('verboseErrors', builders.verboseErrors)\n\n    .option('suppressWarnings', builders.suppressWarnings)\n\n    .strict()\n\n    // Typecast: The @types/yargs type for .middleware is incorrect.\n    // yargs middleware functions receive the yargs instance as a second parameter.\n    // ref: https://yargs.js.org/docs/#api-reference-middlewarecallbacks-applybeforevalidation\n    .middleware(\n      ((yargsArgv: Arguments, yargsInstance: typeof yargsType) => {\n        applyConfig(rawArgv, yargsArgv, yargsInstance);\n        setSnapGlobals(yargsArgv);\n        sanitizeInputs(yargsArgv);\n      }) as any,\n      true,\n    )\n\n    .fail((msg: string, err: Error, _yargs) => {\n      console.error(msg || err.message);\n      if (err?.stack && global.snaps.verboseErrors) {\n        console.error(err.stack);\n      }\n      process.exitCode = 1;\n    })\n\n    .demandCommand(1, 'You must specify at least one command.')\n\n    .help()\n    .alias('help', 'h').argv;\n}\n"]}