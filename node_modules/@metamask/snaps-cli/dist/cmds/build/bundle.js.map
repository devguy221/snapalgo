{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../src/cmds/build/bundle.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAoC;AAEpC,6CAAoD;AACpD,+CAAsE;AAEtE,+EAA+E;AAC/E,mEAAmE;AACnE,mHAAmH;AAEnH;;;;;;;;;GASG;AACH,SAAgB,MAAM,CACpB,GAAW,EACX,IAAY,EACZ,IAAe;IAEf,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC;IAEtD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACtC,MAAM,YAAY,GAAG,gCAAkB,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,OAAO,GAAG,oBAAU,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAE3C,IAAI,iBAAiB,KAAK,6BAAkB,CAAC,IAAI,EAAE;YACjD,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBACrC,MAAM,EAAE,iBAAiB,KAAK,6BAAkB,CAAC,GAAG;gBACpD,OAAO,EAAE;oBACP;wBACE,OAAO,CAAC,mBAAmB,CAAC;wBAC5B;4BACE,OAAO,EAAE;gCACP,QAAQ,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC;6BAC5C;yBACF;qBACF;iBACF;gBACD,OAAO,EAAE;oBACP,OAAO,CAAC,iCAAiC,CAAC;oBAC1C,OAAO,CAAC,yCAAyC,CAAC;oBAClD,OAAO,CAAC,2CAA2C,CAAC;oBACpD,OAAO,CAAC,0CAA0C,CAAC;oBACnD,OAAO,CAAC,oDAAoD,CAAC;iBAC9D;aACF,CAAC,CAAC;SACJ;QAED,OAAO,CAAC,MAAM,CACZ,KAAK,EAAE,WAAW,EAAE,YAAoB,EAAE,EAAE,CAC1C,MAAM,+BAAiB,CAAC;YACtB,WAAW;YACX,YAAY;YACZ,YAAY;YACZ,GAAG;YACH,IAAI;YACJ,OAAO;YACP,IAAI;SACL,CAAC,CACL,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AA/CD,wBA+CC","sourcesContent":["import browserify from 'browserify';\nimport { YargsArgs } from '../../types/yargs';\nimport { TranspilationModes } from '../../builders';\nimport { createBundleStream, closeBundleStream } from './bundleUtils';\n\n// We need to statically import all Browserify transforms and all Babel presets\n// and plugins, and calling `require` is the sanest way to do that.\n/* eslint-disable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, node/global-require */\n\n/**\n * Builds a Snap bundle JSON file from its JavaScript source.\n *\n * @param src - The source file path.\n * @param dest - The destination file path.\n * @param argv - arguments as an object generated by yargs.\n * @param argv.sourceMaps - Whether to output sourcemaps.\n * @param argv.stripComments - Whether to remove comments from code.\n * @param argv.transpilationMode - The Babel transpilation mode.\n */\nexport function bundle(\n  src: string,\n  dest: string,\n  argv: YargsArgs,\n): Promise<boolean> {\n  const { sourceMaps: debug, transpilationMode } = argv;\n\n  return new Promise((resolve, _reject) => {\n    const bundleStream = createBundleStream(dest);\n    const bundler = browserify(src, { debug });\n\n    if (transpilationMode !== TranspilationModes.none) {\n      bundler.transform(require('babelify'), {\n        global: transpilationMode === TranspilationModes.all,\n        presets: [\n          [\n            require('@babel/preset-env'),\n            {\n              targets: {\n                browsers: ['chrome >= 66', 'firefox >= 68'],\n              },\n            },\n          ],\n        ],\n        plugins: [\n          require('@babel/plugin-transform-runtime'),\n          require('@babel/plugin-proposal-class-properties'),\n          require('@babel/plugin-proposal-object-rest-spread'),\n          require('@babel/plugin-proposal-optional-chaining'),\n          require('@babel/plugin-proposal-nullish-coalescing-operator'),\n        ],\n      });\n    }\n\n    bundler.bundle(\n      async (bundleError, bundleBuffer: Buffer) =>\n        await closeBundleStream({\n          bundleError,\n          bundleBuffer,\n          bundleStream,\n          src,\n          dest,\n          resolve,\n          argv,\n        }),\n    );\n  });\n}\n"]}