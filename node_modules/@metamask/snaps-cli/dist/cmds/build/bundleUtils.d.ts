/// <reference types="node" />
import { Option, YargsArgs } from '../../types/yargs';
/**
 * Opens a stream to write the destination file path.
 *
 * @param dest - The output file path
 * @returns - The stream
 */
export declare function createBundleStream(dest: string): NodeJS.WritableStream;
declare type CloseStreamArgs = {
    bundleError: Error;
    bundleBuffer: Buffer;
    bundleStream: NodeJS.WritableStream;
    src: string;
    dest: string;
    resolve: (value: boolean) => void;
    argv: YargsArgs;
};
/**
 * Postprocesses the bundle string and closes the write stream.
 *
 * @param stream - The write stream
 * @param bundleString - The bundle string
 * @param options - post process options
 * @param options.stripComments
 */
export declare function closeBundleStream({ bundleError, bundleBuffer, bundleStream, src, dest, resolve, argv, }: CloseStreamArgs): Promise<void>;
/**
 * Postprocesses a JavaScript bundle string such that it can be evaluated in SES.
 * Currently:
 * - converts certain dot notation to string notation (for indexing)
 * - makes all direct calls to eval indirect
 * - wraps original bundle in anonymous function
 * - handles certain Babel-related edge cases
 *
 * @param bundleString - The bundle string
 * @param options - post process options
 * @param options.stripComments
 * @returns - The postprocessed bundle string
 */
export declare function postProcess(bundleString: string | null, options?: Partial<Option>): string | null;
export {};
