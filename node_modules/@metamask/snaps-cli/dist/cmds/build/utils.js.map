{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/cmds/build/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\nimport stripComments from '@nodefactory/strip-comments';\nimport { writeError } from '../../utils/misc';\nimport { Option, YargsArgs } from '../../types/yargs';\nimport { TranspilationModes } from '../../builders';\n\ntype WriteBundleFileArgs = {\n  bundleError: Error;\n  bundleBuffer: Buffer;\n  src: string;\n  dest: string;\n  resolve: (value: boolean) => void;\n  argv: YargsArgs;\n};\n\n/**\n * Performs postprocessing on the bundle contents and writes them to disk.\n * Intended to be used in the callback passed to the Browserify `.bundle()`\n * call.\n *\n * @param options - Options bag.\n * @param options.bundleError - Any error received from Browserify.\n * @param options.bundleBuffer - The {@link Buffer} with the bundle contents\n * from Browserify.\n * @param options.src - The source file path.\n * @param options.dest - The destination file path.\n * @param options.resolve - A {@link Promise} resolution function, so that we\n * can use promises and `async`/`await` even though Browserify uses callbacks.\n * @param options.argv - The Yargs `argv` object.\n */\nexport async function writeBundleFile({\n  bundleError,\n  bundleBuffer,\n  src,\n  dest,\n  resolve,\n  argv,\n}: WriteBundleFileArgs) {\n  if (bundleError) {\n    await writeError('Build error:', bundleError.message, bundleError);\n  }\n\n  try {\n    await fs.writeFile(\n      dest,\n      postProcess(bundleBuffer ? bundleBuffer.toString() : null, {\n        stripComments: argv.stripComments,\n        transformHtmlComments: argv.transformHtmlComments,\n      }) as string,\n    );\n\n    if (bundleBuffer) {\n      console.log(`Build success: '${src}' bundled as '${dest}'!`);\n    }\n    resolve(true);\n  } catch (error) {\n    await writeError('Write error:', error.message, error, dest);\n  }\n}\n\n/**\n * Postprocesses a JavaScript bundle string such that it can be evaluated in SES.\n * Currently:\n * - converts certain dot notation to string notation (for indexing)\n * - makes all direct calls to eval indirect\n * - wraps original bundle in anonymous function\n * - handles certain Babel-related edge cases\n *\n * @param bundleString - The bundle string\n * @param options - post process options\n * @param options.stripComments\n * @returns - The postprocessed bundle string\n */\nexport function postProcess(\n  bundleString: string | null,\n  options: Partial<Option> = {},\n): string | null {\n  if (typeof bundleString !== 'string') {\n    return null;\n  }\n\n  let processedString = bundleString.trim();\n\n  if (options.stripComments) {\n    // TODO: Upstream a better fix to @nodefactory/strip-comments\n    // The strip-comments package has issues with block comments of the\n    // form \"/**/\", and so we remove them manually first:\n    processedString = processedString.replace(/\\/\\*\\*\\//gu, '');\n\n    processedString = stripComments(processedString);\n  }\n\n  // Break up tokens that could be parsed as HTML comment terminators.\n  // The regular expressions below are written strangely so as to avoid the\n  // appearance of such tokens in our source code.\n  // Ref: https://github.com/endojs/endo/blob/70cc86eb400655e922413b99c38818d7b2e79da0/packages/ses/error-codes/SES_HTML_COMMENT_REJECTED.md\n  // This aggressive hack may change the behavior of programs that contain HTML\n  // comment terminators in string literals.\n  if (options.transformHtmlComments) {\n    processedString = processedString.replace(\n      new RegExp(`<!${'--'}`, 'gu'),\n      '< !--',\n    );\n\n    processedString = processedString.replace(\n      new RegExp(`${'--'}>`, 'gu'),\n      '-- >',\n    );\n  }\n\n  // stuff.eval(otherStuff) => (1, stuff.eval)(otherStuff)\n  processedString = processedString.replace(\n    /((?:\\b[\\w\\d]*[\\])]?\\.)+eval)(\\([^)]*\\))/gu,\n    '(1, $1)$2',\n  );\n\n  // If we don't do the above, the below causes syntax errors if it encounters\n  // things of the form: \"something.eval(stuff)\"\n  // eval(stuff) => (1, eval)(stuff)\n  processedString = processedString.replace(\n    /(\\b)(eval)(\\([^)]*\\))/gu,\n    '$1(1, $2)$3',\n  );\n\n  // Browserify provides the Buffer global as an argument to modules that use\n  // it, but this does not work in SES. Since we pass in Buffer as an endowment,\n  // we can simply remove the argument.\n  processedString = processedString.replace(\n    /^\\(function \\(Buffer\\)\\{$/gmu,\n    '(function (){',\n  );\n\n  if (processedString.length === 0) {\n    throw new Error(`Bundled code is empty after postprocessing.`);\n  }\n\n  // handle some cases by declaring missing globals\n  // Babel regeneratorRuntime\n  if (processedString.indexOf('regeneratorRuntime') !== -1) {\n    processedString = `var regeneratorRuntime;\\n${processedString}`;\n  }\n\n  return processedString;\n}\n\n/**\n * Processes dependencies and updates argv with an options object\n * @param argv\n */\nexport function processDependencies(argv: YargsArgs) {\n  const { depsToTranspile, transpilationMode } = argv;\n  const babelifyOptions: Record<string, any> = {};\n  if (transpilationMode === TranspilationModes.localAndDeps) {\n    const regexpStr = getDependencyRegExp(depsToTranspile as string[]);\n    if (regexpStr !== null) {\n      babelifyOptions.ignore = [regexpStr];\n    }\n  }\n  return babelifyOptions;\n}\n\n/**\n * Processes a string of space delimited dependencies into one regex string\n * @param dependencies\n * @returns a regexp string\n */\nexport function getDependencyRegExp(dependencies: string[]): RegExp | null {\n  let regexp: string | null = null;\n  if (!dependencies || dependencies.includes('.') || !dependencies.length) {\n    return regexp;\n  }\n  const paths: string[] = sanitizeDependencyPaths(dependencies);\n  regexp = `/node_modules/(?!${paths.shift()}`;\n  paths.forEach((path) => (regexp += `|${path}`));\n  regexp += '/)';\n  return RegExp(regexp, 'u');\n}\n\n/**\n * Helper function remove any leading and trailing slashes from dependency list\n * @param dependencies\n * @returns an array of sanitized paths\n */\nexport function sanitizeDependencyPaths(dependencies: string[]): string[] {\n  return dependencies.map((dependency) => {\n    return dependency.replace(/^[/\\\\]+/u, '').replace(/[/\\\\]+$/u, '');\n  });\n}\n\nexport function processInvalidTranspilation(argv: YargsArgs) {\n  if (\n    argv.depsToTranspile &&\n    argv.transpilationMode !== TranspilationModes.localAndDeps\n  ) {\n    throw new Error(\n      '\"depsToTranspile\" can only be specified if \"transpilationMode\" is set to \"localAndDeps\" .',\n    );\n  }\n}\n"]}