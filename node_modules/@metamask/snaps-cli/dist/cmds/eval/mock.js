"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMockEndowments = exports.isConstructor = exports.ALL_APIS = void 0;
const events_1 = __importDefault(require("events"));
const crypto_1 = __importDefault(require("crypto"));
const snap_controllers_1 = require("@metamask/snap-controllers");
const NETWORK_APIS = ['fetch', 'WebSocket'];
exports.ALL_APIS = [...snap_controllers_1.DEFAULT_ENDOWMENTS, ...NETWORK_APIS];
function getMockSnapProvider() {
    const mockProvider = new events_1.default();
    mockProvider.registerRpcMessageHandler = () => true;
    mockProvider.request = async () => true;
    return mockProvider;
}
const isConstructor = (value) => { var _a, _b; return Boolean(typeof ((_b = (_a = value === null || value === void 0 ? void 0 : value.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string'); };
exports.isConstructor = isConstructor;
const mockFunction = () => true;
class MockClass {
}
const handler = {
    construct(Target, args) {
        return new Proxy(new Target(...args), handler);
    },
    get(_target, _prop) {
        return mockFunction;
    },
};
const generateMockClass = (value) => {
    return new Proxy(value, handler);
};
// Things not currently auto-mocked because of NodeJS, by adding them here we have types for them and can use that to generate mocks if needed
const mockWindow = {
    WebSocket: MockClass,
    crypto: crypto_1.default,
    SubtleCrypto: MockClass,
};
const generateMockEndowment = (key) => {
    const globalValue = globalThis[key];
    // Default exposed APIs don't need to be mocked
    if (globalValue && snap_controllers_1.DEFAULT_ENDOWMENTS.includes(key)) {
        return globalValue;
    }
    // Fall back to mockWindow for certain APIs not exposed in global in Node.JS
    const globalOrMocked = globalValue !== null && globalValue !== void 0 ? globalValue : mockWindow[key];
    const type = typeof globalOrMocked;
    const isFunction = type === 'function';
    if (isFunction && (0, exports.isConstructor)(globalOrMocked)) {
        return generateMockClass(globalOrMocked);
    }
    else if (isFunction || !globalOrMocked) {
        // Fall back to function mock for now
        return mockFunction;
    }
    return globalOrMocked;
};
const generateMockEndowments = () => {
    return exports.ALL_APIS.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur]: generateMockEndowment(cur) })), { wallet: getMockSnapProvider() });
};
exports.generateMockEndowments = generateMockEndowments;
//# sourceMappingURL=mock.js.map