import { NpmSnapPackageJson, SnapManifest } from '@metamask/snap-controllers/dist/snaps';
import { YargsArgs } from '../../types/yargs';
/**
 * Initializes a `package.json` file for a Snap project. Will attempt to read
 * and parse the existing file if it already exists, otherwise will intialize
 * a brand new one.
 *
 * @returns The contents of the `package.json` file.
 */
export declare function asyncPackageInit(): Promise<Readonly<NpmSnapPackageJson>>;
/**
 * Interactively constructs a Snap manifest file by prompting the user.
 *
 * @param argv - The `yargs` `argv` object.
 * @param packageJson - The `package.json` object.
 * @param shasum - The shasum of the Snap source file.
 * @returns A tuple of the resulting Snap manifest object and a new `argv` object
 * with properties to match the manifest.
 */
export declare function buildSnapManifest(argv: YargsArgs, packageJson: NpmSnapPackageJson): Promise<[SnapManifest, {
    dist: string;
    outfileName: string;
    src: string;
}]>;
/**
 * Checks whether any files in the current working directory will be overwritten
 * by the initialization process, and asks the user whether to continue if so.
 */
export declare function prepareWorkingDirectory(): Promise<void>;
