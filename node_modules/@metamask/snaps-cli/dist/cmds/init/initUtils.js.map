{"version":3,"file":"initUtils.js","sourceRoot":"","sources":["../../../src/cmds/init/initUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, promises as fs } from 'fs';\nimport pathUtils from 'path';\nimport {\n  NpmSnapFileNames,\n  NpmSnapPackageJson,\n  PROPOSED_NAME_REGEX,\n  SnapManifest,\n  validateSnapJsonFile,\n} from '@metamask/snap-controllers/dist/snaps';\nimport initPackageJson from 'init-package-json';\nimport mkdirp from 'mkdirp';\nimport slash from 'slash';\nimport { YargsArgs } from '../../types/yargs';\nimport {\n  CONFIG_FILE,\n  deepClone,\n  logError,\n  logWarning,\n  prompt,\n  readJsonFile,\n  trimPathString,\n} from '../../utils';\n\n/**\n * This is a placeholder shasum that will be replaced at the end of the init command.\n */\nconst PLACEHOLDER_SHASUM = '2QqUxo5joo4kKKr7yiCjdYsZOZcIFBnIBEdwU9Yx7+M=';\n\nconst NPM_PUBLIC_REGISTRY_URL = 'https://registry.npmjs.org';\n\n/**\n * Initializes a `package.json` file for a Snap project. Will attempt to read\n * and parse the existing file if it already exists, otherwise will intialize\n * a brand new one.\n *\n * @returns The contents of the `package.json` file.\n */\nexport async function asyncPackageInit(): Promise<\n  Readonly<NpmSnapPackageJson>\n> {\n  if (existsSync(NpmSnapFileNames.PackageJson)) {\n    console.log(\n      `Init: Attempting to use existing '${NpmSnapFileNames.PackageJson}'...`,\n    );\n\n    try {\n      const packageJson = await readJsonFile(NpmSnapFileNames.PackageJson);\n      validateSnapJsonFile(NpmSnapFileNames.PackageJson, packageJson);\n\n      console.log(\n        `Init: Successfully parsed '${NpmSnapFileNames.PackageJson}'!`,\n      );\n      return packageJson as NpmSnapPackageJson;\n    } catch (error) {\n      logError(\n        `Init Error: Could not parse '${NpmSnapFileNames.PackageJson}'. Please verify that the file is correctly formatted and try again.`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  // Exit if yarn.lock is found, or we'll be in trouble\n  if (existsSync('yarn.lock')) {\n    logError(\n      `Init Error: Found a 'yarn.lock' file but no '${NpmSnapFileNames.PackageJson}'. Please run 'yarn init' and try again.`,\n    );\n    throw new Error('Already existing yarn.lock file found');\n  }\n\n  // Run 'npm init'\n  return new Promise((resolve, reject) => {\n    initPackageJson(process.cwd(), '', {}, (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nconst YES = 'yes';\nconst YES_VALUES = new Set([YES, 'y']);\n\nfunction isYes(userInput: string | undefined) {\n  return userInput && YES_VALUES.has(userInput.toLowerCase());\n}\n\nconst DEFAULT_PERMISSION_KEY = 'snap_confirm';\nconst getDefaultPermissions = () => {\n  return { [DEFAULT_PERMISSION_KEY]: {} };\n};\n\n/**\n * Interactively constructs a Snap manifest file by prompting the user.\n *\n * @param argv - The `yargs` `argv` object.\n * @param packageJson - The `package.json` object.\n * @param shasum - The shasum of the Snap source file.\n * @returns A tuple of the resulting Snap manifest object and a new `argv` object\n * with properties to match the manifest.\n */\nexport async function buildSnapManifest(\n  argv: YargsArgs,\n  packageJson: NpmSnapPackageJson,\n): Promise<[SnapManifest, { dist: string; outfileName: string; src: string }]> {\n  const { outfileName } = argv;\n  let { dist } = argv;\n  let initialPermissions: Record<string, unknown> = getDefaultPermissions();\n  let { description, name: proposedName } = packageJson;\n\n  if (!description) {\n    description = `The ${proposedName} Snap.`;\n  }\n\n  try {\n    const userInput = await prompt({\n      question: `Use default Snap manifest values?`,\n      defaultValue: YES,\n      shouldClose: false,\n    });\n\n    if (isYes(userInput)) {\n      console.log('Using default values...');\n      try {\n        await mkdirp(dist);\n      } catch (err) {\n        logError(\n          `Init Error: Could not write default 'dist' '${dist}'. Maybe check your local ${CONFIG_FILE} file?`,\n        );\n        throw err;\n      }\n      return endSnapManifest();\n    }\n  } catch (err) {\n    logError(`Init Error: ${err.message}`, err);\n    throw err;\n  }\n\n  let invalidProposedName = true;\n  while (invalidProposedName) {\n    // eslint-disable-next-line require-atomic-updates\n    proposedName = await prompt({\n      question: `Proposed Snap name:`,\n      defaultValue: proposedName,\n    });\n\n    if (\n      proposedName.length > 0 &&\n      proposedName.length <= 214 &&\n      PROPOSED_NAME_REGEX.test(proposedName)\n    ) {\n      invalidProposedName = false;\n    } else {\n      logError(\n        `The proposed name must adhere to npm package naming conventions, except that capital letters are allowed. For details, see: https://docs.npmjs.com/cli/v6/configuring-npm/package-json#name`,\n      );\n    }\n  }\n\n  let invalidDescription = true;\n  while (invalidDescription) {\n    // eslint-disable-next-line require-atomic-updates\n    description = await prompt({\n      question: `Description:`,\n      defaultValue: description,\n    });\n\n    if (description.length === 0 || description.length <= 280) {\n      invalidDescription = false;\n    } else {\n      logError(\n        `The description must be a non-empty string less than or equal to 280 characters.`,\n      );\n    }\n  }\n\n  let invalidDist = true;\n  while (invalidDist) {\n    // eslint-disable-next-line require-atomic-updates\n    dist = await prompt({ question: `Output directory:`, defaultValue: dist });\n    try {\n      dist = trimPathString(dist);\n      await mkdirp(dist);\n      invalidDist = false;\n    } catch (distError) {\n      logError(\n        `Unable to create directory '${dist}'. Ensure that the path is valid and try again.`,\n        distError,\n      );\n    }\n  }\n\n  let invalidPermissions = true;\n  while (invalidPermissions) {\n    const inputPermissions = await prompt({\n      // We add the parenthetical default value ourselves\n      question: `Initial permissions: [perm1 perm2 ...] ([snap_confirm])`,\n    });\n\n    if (\n      !inputPermissions ||\n      inputPermissions.trim() === DEFAULT_PERMISSION_KEY\n    ) {\n      break;\n    }\n\n    try {\n      initialPermissions = inputPermissions\n        .split(' ')\n        .reduce((allPermissions, permission) => {\n          if (\n            typeof permission === 'string' &&\n            permission.match(/^[\\w\\d_:]+$/iu)\n          ) {\n            allPermissions[permission] = {};\n          } else {\n            throw new Error(`Invalid permission: ${permission}`);\n          }\n          return allPermissions;\n        }, {} as Record<string, unknown>);\n\n      invalidPermissions = false;\n    } catch (err) {\n      logError(\n        `Invalid permissions '${inputPermissions}'.\\nThe permissions must be specified as a space-separated list of strings with only characters, digits, underscores ('_'), and colons (':').`,\n        err,\n      );\n    }\n  }\n\n  return endSnapManifest();\n\n  function endSnapManifest(): [\n    SnapManifest,\n    {\n      dist: string;\n      outfileName: string;\n      src: string;\n    },\n  ] {\n    const manifest = {\n      version: packageJson.version,\n      description,\n      proposedName,\n      repository: packageJson.repository\n        ? deepClone(packageJson.repository)\n        : null,\n      source: {\n        shasum: PLACEHOLDER_SHASUM,\n        location: {\n          npm: {\n            filePath: slash(pathUtils.join(dist, outfileName)),\n            packageName: packageJson.name,\n            registry: NPM_PUBLIC_REGISTRY_URL,\n          } as const,\n        },\n      },\n      initialPermissions,\n      manifestVersion: '0.1' as const,\n    };\n\n    try {\n      validateSnapJsonFile(NpmSnapFileNames.Manifest, manifest);\n    } catch (error) {\n      /* istanbul ignore next */\n      throw new Error(\n        `Internal Error: Validation of constructed manifest failed. This is a bug, please report it. Reason:\\n${error.message}`,\n      );\n    }\n\n    return [\n      manifest,\n      { dist, outfileName, src: packageJson.main || 'src/index.js' },\n    ];\n  }\n}\n\nconst INIT_FILE_NAMES = new Set([\n  'src',\n  'index.html',\n  CONFIG_FILE,\n  'dist',\n  NpmSnapFileNames.Manifest,\n]);\n\n/**\n * Checks whether any files in the current working directory will be overwritten\n * by the initialization process, and asks the user whether to continue if so.\n */\nexport async function prepareWorkingDirectory(): Promise<void> {\n  const existingFiles = (await fs.readdir(process.cwd())).filter((item) =>\n    INIT_FILE_NAMES.has(item.toString()),\n  );\n\n  if (existingFiles.length > 0) {\n    logWarning(\n      `\\nInit Warning: Existing files and/or directories may be overwritten:\\n${existingFiles.reduce(\n        (message, currentFile) => {\n          return `${message}\\t${currentFile}\\n`;\n        },\n        '',\n      )}`,\n    );\n\n    const continueInput = await prompt({\n      question: `Continue?`,\n      defaultValue: YES,\n    });\n    const shouldContinue = continueInput && isYes(continueInput);\n\n    if (!shouldContinue) {\n      console.log(`Init: Exiting...`);\n      throw new Error('User refused to continue');\n    }\n  }\n}\n"]}