{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/cmds/serve/index.ts"],"names":[],"mappings":";;;;AAAA,gDAAwB;AACxB,kEAAyC;AAEzC,8DAAsC;AAEtC,uCAA8C;AAC9C,6CAA8E;AAW9E;;;;;;;GAOG;AACH,KAAK,UAAU,KAAK,CAAC,IAAe;IAClC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IAErC,MAAM,uBAAe,CAAC,OAAiB,EAAE,IAAI,CAAC,CAAC;IAE/C,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAEpC,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;QAClD,MAAM,uBAAY,CAAC,GAAG,EAAE,GAAG,EAAE;YAC3B,MAAM,EAAE,OAAiB;YACzB,OAAO,EAAE;gBACP;oBACE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP;4BACE,GAAG,EAAE,eAAe;4BACpB,KAAK,EAAE,UAAU;yBAClB;qBACF;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,+BAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAExD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAEvD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;QAC3B,2BAAc,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QACtB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAtDD,iBAAS;IACP,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC;IACvB,IAAI,EAAE,wCAAwC;IAC9C,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE;QAC5B,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,kBAAQ,CAAC,IAAI,CAAC,CAAC;IACnE,CAAC;IACD,OAAO,EAAE,CAAC,IAAe,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;CAC1C,CAAC","sourcesContent":["import http from 'http';\nimport serveHandler from 'serve-handler';\nimport yargs from 'yargs';\nimport builders from '../../builders';\nimport { YargsArgs } from '../../types/yargs';\nimport { validateDirPath } from '../../utils';\nimport { logRequest, logServerError, logServerListening } from './serveUtils';\n\nexport = {\n  command: ['serve', 's'],\n  desc: 'Locally serve Snap file(s) for testing',\n  builder: (yarg: yargs.Argv) => {\n    yarg.option('root', builders.root).option('port', builders.port);\n  },\n  handler: (argv: YargsArgs) => serve(argv),\n};\n\n/**\n * Starts a local, static HTTP server on the given port with the given root\n * directory.\n *\n * @param argv - arguments as an object generated by yargs\n * @param argv.root - The root directory path string\n * @param argv.port - The server port\n */\nasync function serve(argv: YargsArgs): Promise<void> {\n  const { port, root: rootDir } = argv;\n\n  await validateDirPath(rootDir as string, true);\n\n  console.log(`\\nStarting server...`);\n\n  const server = http.createServer(async (req, res) => {\n    await serveHandler(req, res, {\n      public: rootDir as string,\n      headers: [\n        {\n          source: '**/*',\n          headers: [\n            {\n              key: 'Cache-Control',\n              value: 'no-cache',\n            },\n          ],\n        },\n      ],\n    });\n  });\n\n  server.listen({ port }, () => logServerListening(port));\n\n  server.on('request', (request) => logRequest(request));\n\n  server.on('error', (error) => {\n    logServerError(error, argv.port);\n    process.exitCode = 1;\n  });\n\n  server.on('close', () => {\n    console.log('Server closed');\n    process.exitCode = 1;\n  });\n}\n"]}