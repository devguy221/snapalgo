{"version":3,"file":"watchHandler.js","sourceRoot":"","sources":["../../../src/cmds/watch/watchHandler.ts"],"names":[],"mappings":";;;;;;AAAA,wDAAgC;AAEhC,4CAAyC;AACzC,uCAMqB;AAErB;;;;;;;;;;;GAWG;AACI,KAAK,UAAU,KAAK,CAAC,IAAe;IACzC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;IACxC,IAAI,WAAW,EAAE;QACf,2BAAmB,CAAC,WAAqB,CAAC,CAAC;KAC5C;IACD,MAAM,wBAAgB,CAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,uBAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClC,MAAM,OAAO,GACX,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7E,MAAM,WAAW,GAAG,sBAAc,CAAC,IAAI,EAAE,WAAqB,CAAC,CAAC;IAEhE,MAAM,OAAO,GAAG,kBAAQ,CAAC,KAAK,CAAC,OAAO,EAAE;QACtC,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE;YACP,oBAAoB;YACpB,MAAM,IAAI,KAAK;YACf,YAAY;YACZ,aAAa;YACb,cAAc;YACd,cAAc;YACd,0BAA0B;YAC1B,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC;SACpD;KACF,CAAC,CAAC;IAEH,OAAO;SACJ,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;QAChB,eAAM,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;SACD,EAAE,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,EAAE;QAC1B,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC;QACnC,eAAM,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;SACD,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAY,EAAE,EAAE;QAC7B,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC;QACrC,eAAM,CAAC,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;SACD,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC;SACpE,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,EAAE,EAAE;QAC1B,gBAAQ,CAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEL,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE,CAAC,CAAC;IAC1B,OAAO,CAAC,GAAG,CAAC,aAAa,OAAO,kBAAkB,CAAC,CAAC;AACtD,CAAC;AA5CD,sBA4CC","sourcesContent":["import chokidar from 'chokidar';\nimport { YargsArgs } from '../../types/yargs';\nimport { bundle } from '../build/bundle';\nimport {\n  logError,\n  getOutfilePath,\n  validateDirPath,\n  validateFilePath,\n  validateOutfileName,\n} from '../../utils';\n\n/**\n * Watch a directory and its subdirectories for changes, and build when files\n * are added or changed.\n *\n * Ignores 'node_modules' and dotfiles.\n * Creates destination directory if it doesn't exist.\n *\n * @param argv - arguments as an object generated by yargs\n * @param argv.src - The source file path\n * @param argv.dist - The output directory path\n * @param argv.'outfileName' - The output file name\n */\nexport async function watch(argv: YargsArgs): Promise<void> {\n  const { src, dist, outfileName } = argv;\n  if (outfileName) {\n    validateOutfileName(outfileName as string);\n  }\n  await validateFilePath(src);\n  await validateDirPath(dist, true);\n  const rootDir =\n    src.indexOf('/') === -1 ? '.' : src.substring(0, src.lastIndexOf('/') + 1);\n  const outfilePath = getOutfilePath(dist, outfileName as string);\n\n  const watcher = chokidar.watch(rootDir, {\n    ignoreInitial: true,\n    ignored: [\n      '**/node_modules/**',\n      `**/${dist}/**`,\n      `**/test/**`,\n      `**/tests/**`,\n      `**/*.test.js`,\n      `**/*.test.ts`,\n      /* istanbul ignore next */\n      (str: string) => str !== '.' && str.startsWith('.'),\n    ],\n  });\n\n  watcher\n    .on('ready', () => {\n      bundle(src, outfilePath, argv);\n    })\n    .on('add', (path: string) => {\n      console.log(`File added: ${path}`);\n      bundle(src, outfilePath, argv);\n    })\n    .on('change', (path: string) => {\n      console.log(`File changed: ${path}`);\n      bundle(src, outfilePath, argv);\n    })\n    .on('unlink', (path: string) => console.log(`File removed: ${path}`))\n    .on('error', (err: Error) => {\n      logError(`Watcher error: ${err.message}`, err);\n    });\n\n  watcher.add(`${rootDir}`);\n  console.log(`Watching '${rootDir}' for changes...`);\n}\n"]}