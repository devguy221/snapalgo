{"version":3,"file":"validate-fs.js","sourceRoot":"","sources":["../../src/utils/validate-fs.ts"],"names":[],"mappings":";;;;;;AAAA,gDAA6B;AAC7B,6BAA2C;AAE3C;;;;;;;GAOG;AACH,SAAgB,cAAc,CAAC,MAAc,EAAE,WAAmB;IAChE,OAAO,cAAS,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,IAAI,WAAW,CAAC,CAAC;AAC5D,CAAC;AAFD,wCAEC;AAED;;;;;;GAMG;AACH,SAAgB,mBAAmB,CAAC,QAAgB;IAClD,IACE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;QACzB,QAAQ,KAAK,KAAK;QAClB,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAC5B;QACA,MAAM,IAAI,KAAK,CAAC,yBAAyB,QAAQ,sBAAsB,CAAC,CAAC;KAC1E;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AATD,kDASC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,gBAAgB,CAAC,QAAgB;IACrD,MAAM,MAAM,GAAG,MAAM,WAAM,CAAC,QAAQ,CAAC,CAAC;IACtC,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CACb,oBAAoB,QAAQ,oCAAoC,CACjE,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AARD,4CAQC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,eAAe,CACnC,OAAe,EACf,SAAkB;IAElB,MAAM,MAAM,GAAG,MAAM,gBAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACrD,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CACb,oBAAoB,OAAO,+CAA+C,CAC3E,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,0CAWC","sourcesContent":["import pathUtils from 'path';\nimport { isFile, isDirectory } from './fs';\n\n/**\n * Gets the complete out file path from the source file path and output\n * directory path.\n *\n * @param srcFilePath - The source file path\n * @param outDir - The out file directory\n * @returns - The complete out file path\n */\nexport function getOutfilePath(outDir: string, outFileName: string): string {\n  return pathUtils.join(outDir, outFileName || 'bundle.js');\n}\n\n/**\n * Ensures that the outfile name is just a js file name.\n * Throws on validation failure\n *\n * @param filename - The file name to validate\n * @returns - True if validation succeeded\n */\nexport function validateOutfileName(filename: string): boolean {\n  if (\n    !filename.endsWith('.js') ||\n    filename === '.js' ||\n    filename.indexOf('/') !== -1\n  ) {\n    throw new Error(`Invalid outfile name: ${filename}. Must be a .js file`);\n  }\n  return true;\n}\n\n/**\n * Validates a file path.\n * Throws on validation failure\n *\n * @param filePath - The file path to validate\n * @returns - True if validation succeeded\n */\nexport async function validateFilePath(filePath: string): Promise<boolean> {\n  const exists = await isFile(filePath);\n  if (!exists) {\n    throw new Error(\n      `Invalid params: '${filePath}' is not a file or does not exist.`,\n    );\n  }\n  return true;\n}\n\n/**\n * Validates a directory path.\n * Throws on validation failure.\n *\n * @param dirPath - The directory path to validate\n * @param createDir - Whether to create the directory if it doesn't exist\n * @returns - True if validation succeeded\n */\nexport async function validateDirPath(\n  dirName: string,\n  createDir: boolean,\n): Promise<boolean> {\n  const exists = await isDirectory(dirName, createDir);\n  if (!exists) {\n    throw new Error(\n      `Invalid params: '${dirName}' is not a directory or could not be created.`,\n    );\n  }\n  return true;\n}\n"]}