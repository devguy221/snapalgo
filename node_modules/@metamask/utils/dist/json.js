"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsonRpcIdValidator = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.jsonrpc2 = exports.isValidJson = void 0;
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const misc_1 = require("./misc");
/**
 * Type guard for {@link Json}.
 *
 * @param value - The value to check.
 * @returns Whether the value is valid JSON.
 */
function isValidJson(value) {
    try {
        return fast_deep_equal_1.default(value, JSON.parse(JSON.stringify(value)));
    }
    catch (_) {
        return false;
    }
}
exports.isValidJson = isValidJson;
/**
 * The string '2.0'.
 */
exports.jsonrpc2 = '2.0';
/**
 * Type guard to narrow a JSON-RPC request or notification object to a
 * notification.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 * @returns Whether the specified JSON-RPC message is a notification.
 */
function isJsonRpcNotification(requestOrNotification) {
    return !misc_1.hasProperty(requestOrNotification, 'id');
}
exports.isJsonRpcNotification = isJsonRpcNotification;
/**
 * Assertion type guard to narrow a JSON-RPC request or notification object to a
 * notification.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 */
function assertIsJsonRpcNotification(requestOrNotification) {
    if (!isJsonRpcNotification(requestOrNotification)) {
        throw new Error('Not a JSON-RPC notification.');
    }
}
exports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;
/**
 * Type guard to narrow a JSON-RPC request or notification object to a request.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 * @returns Whether the specified JSON-RPC message is a request.
 */
function isJsonRpcRequest(requestOrNotification) {
    return misc_1.hasProperty(requestOrNotification, 'id');
}
exports.isJsonRpcRequest = isJsonRpcRequest;
/**
 * Assertion type guard to narrow a JSON-RPC request or notification object to a
 * request.
 *
 * @param requestOrNotification - The JSON-RPC request or notification to check.
 */
function assertIsJsonRpcRequest(requestOrNotification) {
    if (!isJsonRpcRequest(requestOrNotification)) {
        throw new Error('Not a JSON-RPC request.');
    }
}
exports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;
/**
 * Type guard to narrow a JsonRpcResponse object to a success (or failure).
 *
 * @param response - The response object to check.
 * @returns Whether the response object is a success, i.e. has a `result`
 * property.
 */
function isJsonRpcSuccess(response) {
    return misc_1.hasProperty(response, 'result');
}
exports.isJsonRpcSuccess = isJsonRpcSuccess;
/**
 * Type assertion to narrow a JsonRpcResponse object to a success (or failure).
 *
 * @param response - The response object to check.
 */
function assertIsJsonRpcSuccess(response) {
    if (!isJsonRpcSuccess(response)) {
        throw new Error('Not a successful JSON-RPC response.');
    }
}
exports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;
/**
 * Type guard to narrow a JsonRpcResponse object to a failure (or success).
 *
 * @param response - The response object to check.
 * @returns Whether the response object is a failure, i.e. has an `error`
 * property.
 */
function isJsonRpcFailure(response) {
    return misc_1.hasProperty(response, 'error');
}
exports.isJsonRpcFailure = isJsonRpcFailure;
/**
 * Type assertion to narrow a JsonRpcResponse object to a failure (or success).
 *
 * @param response - The response object to check.
 */
function assertIsJsonRpcFailure(response) {
    if (!isJsonRpcFailure(response)) {
        throw new Error('Not a failed JSON-RPC response.');
    }
}
exports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;
/**
 * Gets a function for validating JSON-RPC request / response `id` values.
 *
 * By manipulating the options of this factory, you can control the behavior
 * of the resulting validator for some edge cases. This is useful because e.g.
 * `null` should sometimes but not always be permitted.
 *
 * Note that the empty string (`''`) is always permitted by the JSON-RPC
 * specification, but that kind of sucks and you may want to forbid it in some
 * instances anyway.
 *
 * For more details, see the
 * [JSON-RPC Specification](https://www.jsonrpc.org/specification).
 *
 * @param options - An options object.
 * @param options.permitEmptyString - Whether the empty string (i.e. `''`)
 * should be treated as a valid ID. Default: `true`
 * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)
 * should be treated as valid IDs. Default: `false`
 * @param options.permitNull - Whether `null` should be treated as a valid ID.
 * Default: `true`
 * @returns The JSON-RPC ID validator function.
 */
function getJsonRpcIdValidator(options) {
    const { permitEmptyString, permitFractions, permitNull } = Object.assign({ permitEmptyString: true, permitFractions: false, permitNull: true }, options);
    /**
     * Type guard for {@link JsonRpcId}.
     *
     * @param id - The JSON-RPC ID value to check.
     * @returns Whether the given ID is valid per the options given to the
     * factory.
     */
    const isValidJsonRpcId = (id) => {
        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||
            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||
            (permitNull && id === null));
    };
    return isValidJsonRpcId;
}
exports.getJsonRpcIdValidator = getJsonRpcIdValidator;
//# sourceMappingURL=json.js.map